//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewPost`.
    static let newPost = _R.storyboard.newPost()
    /// Storyboard `ProfileCard`.
    static let profileCard = _R.storyboard.profileCard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NewPost", bundle: ...)`
    static func newPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newPost)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileCard", bundle: ...)`
    static func profileCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileCard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 10 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "production"
    static let comAppleDeveloperSiri = true
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityDeviceCamera = true
    static let comAppleSecurityNetworkClient = true
    static let comAppleSecurityPersonalInformationPhotosLibrary = true

    struct comAppleDeveloperIcloudContainerIdentifiers {
      fileprivate init() {}
    }

    struct comAppleDeveloperIcloudServices {
      static let cloudDocuments = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudDocuments") ?? "CloudDocuments"

      fileprivate init() {}
    }

    struct comAppleDeveloperUbiquityContainerIdentifiers {
      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupJpPronamaImast = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.jp.pronama.imast") ?? "group.jp.pronama.imast"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `emoji.json`.
    static let emojiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emoji", pathExtension: "json")

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "emoji", withExtension: "json")`
    static func emojiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojiJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `ArrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowDown")
    /// Image `ArrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowUp")
    /// Image `Boost`.
    static let boost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Boost")
    /// Image `Follow`.
    static let follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow")
    /// Image `MoreOutline`.
    static let moreOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoreOutline")
    /// Image `More`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "More")
    /// Image `Poll`.
    static let poll = Rswift.ImageResource(bundle: R.hostingBundle, name: "Poll")
    /// Image `Reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reply")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `StreamingStatus`.
    static let streamingStatus = Rswift.ImageResource(bundle: R.hostingBundle, name: "StreamingStatus")
    /// Image `visibility-direct`.
    static let visibilityDirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-direct")
    /// Image `visibility-private`.
    static let visibilityPrivate = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-private")
    /// Image `visibility-public`.
    static let visibilityPublic = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-public")
    /// Image `visibility-unlisted`.
    static let visibilityUnlisted = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-unlisted")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Boost", bundle: ..., traitCollection: ...)`
    static func boost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Follow", bundle: ..., traitCollection: ...)`
    static func follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "More", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoreOutline", bundle: ..., traitCollection: ...)`
    static func moreOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Poll", bundle: ..., traitCollection: ...)`
    static func poll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poll, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StreamingStatus", bundle: ..., traitCollection: ...)`
    static func streamingStatus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.streamingStatus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-direct", bundle: ..., traitCollection: ...)`
    static func visibilityDirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityDirect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-private", bundle: ..., traitCollection: ...)`
    static func visibilityPrivate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPrivate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-public", bundle: ..., traitCollection: ...)`
    static func visibilityPublic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPublic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-unlisted", bundle: ..., traitCollection: ...)`
    static func visibilityUnlisted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityUnlisted, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 2 properties.
  struct info {
    struct nsUserActivityTypes {
      static let tootIntent = infoPlistString(path: ["NSUserActivityTypes"], key: "TootIntent") ?? "TootIntent"

      fileprivate init() {}
    }

    struct uiApplicationShortcutItems {
      struct product_BUNDLE_IDENTIFIERNewPost {
        static let _key = "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"
        static let uiApplicationShortcutItemIconType = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"], key: "UIApplicationShortcutItemIconType") ?? "UIApplicationShortcutIconTypeCompose"
        static let uiApplicationShortcutItemTitle = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"], key: "UIApplicationShortcutItemTitle") ?? "新規投稿"
        static let uiApplicationShortcutItemType = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"], key: "UIApplicationShortcutItemType") ?? "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AddAccountSuccessViewController`.
    static let addAccountSuccessViewController = _R.nib._AddAccountSuccessViewController()
    /// Nib `NewPostMediaListViewController`.
    static let newPostMediaListViewController = _R.nib._NewPostMediaListViewController()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `UserProfileBioTableViewCell`.
    static let userProfileBioTableViewCell = _R.nib._UserProfileBioTableViewCell()
    /// Nib `UserProfileInfoTableViewCell`.
    static let userProfileInfoTableViewCell = _R.nib._UserProfileInfoTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddAccountSuccessViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addAccountSuccessViewController) instead")
    static func addAccountSuccessViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAccountSuccessViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewPostMediaListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newPostMediaListViewController) instead")
    static func newPostMediaListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newPostMediaListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserProfileBioTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userProfileBioTableViewCell) instead")
    static func userProfileBioTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileBioTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserProfileInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userProfileInfoTableViewCell) instead")
    static func userProfileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileInfoTableViewCell)
    }
    #endif

    static func addAccountSuccessViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addAccountSuccessViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func newPostMediaListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.newPostMediaListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func userProfileBioTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileBioTableViewCell? {
      return R.nib.userProfileBioTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
    }

    static func userProfileInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileInfoTableViewCell? {
      return R.nib.userProfileInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `notificationTableViewCell`.
    static let notificationTableViewCell: Rswift.ReuseIdentifier<NotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "notificationTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 6 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 28 localization keys.
    struct localizable {
      /// Base translation: Cancel
      ///
      /// Locales: Base, ja
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Connect
      ///
      /// Locales: Base, ja
      static let connect = Rswift.StringResource(key: "connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Connected
      ///
      /// Locales: Base, ja
      static let connected = Rswift.StringResource(key: "connected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Current: @%@
      ///
      /// Locales: Base, ja
      static let currentAccount = Rswift.StringResource(key: "currentAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Disconnect
      ///
      /// Locales: Base, ja
      static let disconnect = Rswift.StringResource(key: "disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Error
      ///
      /// Locales: Base, ja
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Fetch failed
      ///
      /// Locales: Base, ja
      static let fetchFailed = Rswift.StringResource(key: "fetchFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Help / Feedback
      ///
      /// Locales: Base, ja
      static let helpAndFeedback = Rswift.StringResource(key: "helpAndFeedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Home
      ///
      /// Locales: Base, ja
      static let homeTimelineShort = Rswift.StringResource(key: "homeTimeline.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Home Timeline
      ///
      /// Locales: Base, ja
      static let homeTimeline = Rswift.StringResource(key: "homeTimeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: LTL
      ///
      /// Locales: Base, ja
      static let localTimelineShort = Rswift.StringResource(key: "localTimeline.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Lists
      ///
      /// Locales: Base, ja
      static let lists = Rswift.StringResource(key: "lists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Local Timeline
      ///
      /// Locales: Base, ja
      static let localTimeline = Rswift.StringResource(key: "localTimeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: My Profile
      ///
      /// Locales: Base, ja
      static let myProfile = Rswift.StringResource(key: "myProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Not connected
      ///
      /// Locales: Base, ja
      static let notConnected = Rswift.StringResource(key: "notConnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Nothing more
      ///
      /// Locales: Base, ja
      static let nothingMore = Rswift.StringResource(key: "nothingMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Notifications
      ///
      /// Locales: Base, ja
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Others
      ///
      /// Locales: Base, ja
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Please input instance.
      ///
      /// Locales: Base, ja
      static let errorPleaseInputInstance = Rswift.StringResource(key: "error.pleaseInputInstance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Post
      ///
      /// Locales: Base, ja
      static let post = Rswift.StringResource(key: "post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Read more
      ///
      /// Locales: Base, ja
      static let readmore = Rswift.StringResource(key: "readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Refresh
      ///
      /// Locales: Base, ja
      static let refetch = Rswift.StringResource(key: "refetch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Settings
      ///
      /// Locales: Base, ja
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Status: %@
      ///
      /// Locales: Base, ja
      static let streamingStatus = Rswift.StringResource(key: "streamingStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Streaming
      ///
      /// Locales: Base, ja
      static let streaming = Rswift.StringResource(key: "streaming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Switch active account
      ///
      /// Locales: Base, ja
      static let switchActiveAccount = Rswift.StringResource(key: "switchActiveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: This feature requires Mastodon %@ or higher.
      ///
      /// Locales: Base, ja
      static let errorRequiredNewerMastodon = Rswift.StringResource(key: "error.requiredNewerMastodon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: This feature requires iOS %.1f or higher.
      ///
      /// Locales: Base, ja
      static let errorRequiredNewerOS = Rswift.StringResource(key: "error.requiredNewerOS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)

      /// Base translation: Cancel
      ///
      /// Locales: Base, ja
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, value: "Cancel", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, value: "Cancel", comment: "")
      }

      /// Base translation: Connect
      ///
      /// Locales: Base, ja
      static func connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect", bundle: hostingBundle, value: "Connect", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect"
        }

        return NSLocalizedString("connect", bundle: bundle, value: "Connect", comment: "")
      }

      /// Base translation: Connected
      ///
      /// Locales: Base, ja
      static func connected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connected", bundle: hostingBundle, value: "Connected", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connected"
        }

        return NSLocalizedString("connected", bundle: bundle, value: "Connected", comment: "")
      }

      /// Base translation: Current: @%@
      ///
      /// Locales: Base, ja
      static func currentAccount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("currentAccount", bundle: hostingBundle, value: "Current: @%@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currentAccount"
        }

        let format = NSLocalizedString("currentAccount", bundle: bundle, value: "Current: @%@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Disconnect
      ///
      /// Locales: Base, ja
      static func disconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disconnect", bundle: hostingBundle, value: "Disconnect", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disconnect"
        }

        return NSLocalizedString("disconnect", bundle: bundle, value: "Disconnect", comment: "")
      }

      /// Base translation: Error
      ///
      /// Locales: Base, ja
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.title", bundle: hostingBundle, value: "Error", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.title"
        }

        return NSLocalizedString("error.title", bundle: bundle, value: "Error", comment: "")
      }

      /// Base translation: Fetch failed
      ///
      /// Locales: Base, ja
      static func fetchFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fetchFailed", bundle: hostingBundle, value: "Fetch failed", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fetchFailed"
        }

        return NSLocalizedString("fetchFailed", bundle: bundle, value: "Fetch failed", comment: "")
      }

      /// Base translation: Help / Feedback
      ///
      /// Locales: Base, ja
      static func helpAndFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpAndFeedback", bundle: hostingBundle, value: "Help / Feedback", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpAndFeedback"
        }

        return NSLocalizedString("helpAndFeedback", bundle: bundle, value: "Help / Feedback", comment: "")
      }

      /// Base translation: Home
      ///
      /// Locales: Base, ja
      static func homeTimelineShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeTimeline.short", bundle: hostingBundle, value: "Home", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "homeTimeline.short"
        }

        return NSLocalizedString("homeTimeline.short", bundle: bundle, value: "Home", comment: "")
      }

      /// Base translation: Home Timeline
      ///
      /// Locales: Base, ja
      static func homeTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeTimeline", bundle: hostingBundle, value: "Home Timeline", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "homeTimeline"
        }

        return NSLocalizedString("homeTimeline", bundle: bundle, value: "Home Timeline", comment: "")
      }

      /// Base translation: LTL
      ///
      /// Locales: Base, ja
      static func localTimelineShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("localTimeline.short", bundle: hostingBundle, value: "LTL", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "localTimeline.short"
        }

        return NSLocalizedString("localTimeline.short", bundle: bundle, value: "LTL", comment: "")
      }

      /// Base translation: Lists
      ///
      /// Locales: Base, ja
      static func lists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists", bundle: hostingBundle, value: "Lists", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lists"
        }

        return NSLocalizedString("lists", bundle: bundle, value: "Lists", comment: "")
      }

      /// Base translation: Local Timeline
      ///
      /// Locales: Base, ja
      static func localTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("localTimeline", bundle: hostingBundle, value: "Local Timeline", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "localTimeline"
        }

        return NSLocalizedString("localTimeline", bundle: bundle, value: "Local Timeline", comment: "")
      }

      /// Base translation: My Profile
      ///
      /// Locales: Base, ja
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myProfile", bundle: hostingBundle, value: "My Profile", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myProfile"
        }

        return NSLocalizedString("myProfile", bundle: bundle, value: "My Profile", comment: "")
      }

      /// Base translation: Not connected
      ///
      /// Locales: Base, ja
      static func notConnected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notConnected", bundle: hostingBundle, value: "Not connected", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notConnected"
        }

        return NSLocalizedString("notConnected", bundle: bundle, value: "Not connected", comment: "")
      }

      /// Base translation: Nothing more
      ///
      /// Locales: Base, ja
      static func nothingMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nothingMore", bundle: hostingBundle, value: "Nothing more", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nothingMore"
        }

        return NSLocalizedString("nothingMore", bundle: bundle, value: "Nothing more", comment: "")
      }

      /// Base translation: Notifications
      ///
      /// Locales: Base, ja
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications", bundle: hostingBundle, value: "Notifications", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifications"
        }

        return NSLocalizedString("notifications", bundle: bundle, value: "Notifications", comment: "")
      }

      /// Base translation: Others
      ///
      /// Locales: Base, ja
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other", bundle: hostingBundle, value: "Others", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other"
        }

        return NSLocalizedString("other", bundle: bundle, value: "Others", comment: "")
      }

      /// Base translation: Please input instance.
      ///
      /// Locales: Base, ja
      static func errorPleaseInputInstance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.pleaseInputInstance", bundle: hostingBundle, value: "Please input instance.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.pleaseInputInstance"
        }

        return NSLocalizedString("error.pleaseInputInstance", bundle: bundle, value: "Please input instance.", comment: "")
      }

      /// Base translation: Post
      ///
      /// Locales: Base, ja
      static func post(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post", bundle: hostingBundle, value: "Post", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "post"
        }

        return NSLocalizedString("post", bundle: bundle, value: "Post", comment: "")
      }

      /// Base translation: Read more
      ///
      /// Locales: Base, ja
      static func readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("readmore", bundle: hostingBundle, value: "Read more", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "readmore"
        }

        return NSLocalizedString("readmore", bundle: bundle, value: "Read more", comment: "")
      }

      /// Base translation: Refresh
      ///
      /// Locales: Base, ja
      static func refetch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refetch", bundle: hostingBundle, value: "Refresh", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "refetch"
        }

        return NSLocalizedString("refetch", bundle: bundle, value: "Refresh", comment: "")
      }

      /// Base translation: Settings
      ///
      /// Locales: Base, ja
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, value: "Settings", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, value: "Settings", comment: "")
      }

      /// Base translation: Status: %@
      ///
      /// Locales: Base, ja
      static func streamingStatus(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("streamingStatus", bundle: hostingBundle, value: "Status: %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "streamingStatus"
        }

        let format = NSLocalizedString("streamingStatus", bundle: bundle, value: "Status: %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Streaming
      ///
      /// Locales: Base, ja
      static func streaming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("streaming", bundle: hostingBundle, value: "Streaming", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "streaming"
        }

        return NSLocalizedString("streaming", bundle: bundle, value: "Streaming", comment: "")
      }

      /// Base translation: Switch active account
      ///
      /// Locales: Base, ja
      static func switchActiveAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("switchActiveAccount", bundle: hostingBundle, value: "Switch active account", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchActiveAccount"
        }

        return NSLocalizedString("switchActiveAccount", bundle: bundle, value: "Switch active account", comment: "")
      }

      /// Base translation: This feature requires Mastodon %@ or higher.
      ///
      /// Locales: Base, ja
      static func errorRequiredNewerMastodon(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("error.requiredNewerMastodon", bundle: hostingBundle, value: "This feature requires Mastodon %@ or higher.", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.requiredNewerMastodon"
        }

        let format = NSLocalizedString("error.requiredNewerMastodon", bundle: bundle, value: "This feature requires Mastodon %@ or higher.", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: This feature requires iOS %.1f or higher.
      ///
      /// Locales: Base, ja
      static func errorRequiredNewerOS(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("error.requiredNewerOS", bundle: hostingBundle, value: "This feature requires iOS %.1f or higher.", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.requiredNewerOS"
        }

        let format = NSLocalizedString("error.requiredNewerOS", bundle: bundle, value: "This feature requires iOS %.1f or higher.", comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.login` struct is generated, and contains static references to 16 localization keys.
    struct login {
      /// Base translation: Authorize
      ///
      /// Locales: Base, ja
      static let authorizeTitle = Rswift.StringResource(key: "authorize.title", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: By login, you agree to follow the rules and privacy policies.
      ///
      /// Locales: Base, ja
      static let authorizeTosHeader = Rswift.StringResource(key: "authorize.tos.header", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Fetching server information...
      ///
      /// Locales: Base, ja
      static let progressDialogFetchingServerInfo = Rswift.StringResource(key: "progressDialog.fetchingServerInfo", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Logging in...
      ///
      /// Locales: Base, ja
      static let progressDialogTitle = Rswift.StringResource(key: "progressDialog.title", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Login
      ///
      /// Locales: Base, ja
      static let loginButton = Rswift.StringResource(key: "loginButton", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Login
      ///
      /// Locales: Base, ja
      static let title = Rswift.StringResource(key: "title", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Login with Safari (Recommended)
      ///
      /// Locales: Base, ja
      static let authorizeMethodSafari = Rswift.StringResource(key: "authorize.method.safari", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Login with mail address and password
      ///
      /// Locales: Base, ja
      static let authorizeMethodMailAndPassword = Rswift.StringResource(key: "authorize.method.mailAndPassword", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Mail address
      ///
      /// Locales: Base, ja
      static let passwordLoginMailAddress = Rswift.StringResource(key: "passwordLogin.mailAddress", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Password
      ///
      /// Locales: Base, ja
      static let passwordLoginPassword = Rswift.StringResource(key: "passwordLogin.password", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Please authorize
      ///
      /// Locales: Base, ja
      static let progressDialogPleaseAuthorize = Rswift.StringResource(key: "progressDialog.pleaseAuthorize", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Please input mastodon instance
      ///
      /// Locales: Base, ja
      static let pleaseInputMastodonInstance = Rswift.StringResource(key: "pleaseInputMastodonInstance", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Registering app to server...
      ///
      /// Locales: Base, ja
      static let progressDialogRegisteringApplication = Rswift.StringResource(key: "progressDialog.registeringApplication", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Rules of this server
      ///
      /// Locales: Base, ja
      static let authorizeTosRules = Rswift.StringResource(key: "authorize.tos.rules", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Terms of Service of this server
      ///
      /// Locales: Base, ja
      static let authorizeTosTermsOfService = Rswift.StringResource(key: "authorize.tos.termsOfService", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Welcome, %@
      ///
      /// Locales: Base, ja
      static let welcomeMessage = Rswift.StringResource(key: "welcome.message", tableName: "Login", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)

      /// Base translation: Authorize
      ///
      /// Locales: Base, ja
      static func authorizeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.title", tableName: "Login", bundle: hostingBundle, value: "Authorize", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.title"
        }

        return NSLocalizedString("authorize.title", tableName: "Login", bundle: bundle, value: "Authorize", comment: "")
      }

      /// Base translation: By login, you agree to follow the rules and privacy policies.
      ///
      /// Locales: Base, ja
      static func authorizeTosHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.tos.header", tableName: "Login", bundle: hostingBundle, value: "By login, you agree to follow the rules and privacy policies.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.tos.header"
        }

        return NSLocalizedString("authorize.tos.header", tableName: "Login", bundle: bundle, value: "By login, you agree to follow the rules and privacy policies.", comment: "")
      }

      /// Base translation: Fetching server information...
      ///
      /// Locales: Base, ja
      static func progressDialogFetchingServerInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.fetchingServerInfo", tableName: "Login", bundle: hostingBundle, value: "Fetching server information...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.fetchingServerInfo"
        }

        return NSLocalizedString("progressDialog.fetchingServerInfo", tableName: "Login", bundle: bundle, value: "Fetching server information...", comment: "")
      }

      /// Base translation: Logging in...
      ///
      /// Locales: Base, ja
      static func progressDialogTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.title", tableName: "Login", bundle: hostingBundle, value: "Logging in...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.title"
        }

        return NSLocalizedString("progressDialog.title", tableName: "Login", bundle: bundle, value: "Logging in...", comment: "")
      }

      /// Base translation: Login
      ///
      /// Locales: Base, ja
      static func loginButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loginButton", tableName: "Login", bundle: hostingBundle, value: "Login", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "loginButton"
        }

        return NSLocalizedString("loginButton", tableName: "Login", bundle: bundle, value: "Login", comment: "")
      }

      /// Base translation: Login
      ///
      /// Locales: Base, ja
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Login", bundle: hostingBundle, value: "Login", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Login", bundle: bundle, value: "Login", comment: "")
      }

      /// Base translation: Login with Safari (Recommended)
      ///
      /// Locales: Base, ja
      static func authorizeMethodSafari(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.method.safari", tableName: "Login", bundle: hostingBundle, value: "Login with Safari (Recommended)", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.method.safari"
        }

        return NSLocalizedString("authorize.method.safari", tableName: "Login", bundle: bundle, value: "Login with Safari (Recommended)", comment: "")
      }

      /// Base translation: Login with mail address and password
      ///
      /// Locales: Base, ja
      static func authorizeMethodMailAndPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.method.mailAndPassword", tableName: "Login", bundle: hostingBundle, value: "Login with mail address and password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.method.mailAndPassword"
        }

        return NSLocalizedString("authorize.method.mailAndPassword", tableName: "Login", bundle: bundle, value: "Login with mail address and password", comment: "")
      }

      /// Base translation: Mail address
      ///
      /// Locales: Base, ja
      static func passwordLoginMailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordLogin.mailAddress", tableName: "Login", bundle: hostingBundle, value: "Mail address", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "passwordLogin.mailAddress"
        }

        return NSLocalizedString("passwordLogin.mailAddress", tableName: "Login", bundle: bundle, value: "Mail address", comment: "")
      }

      /// Base translation: Password
      ///
      /// Locales: Base, ja
      static func passwordLoginPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordLogin.password", tableName: "Login", bundle: hostingBundle, value: "Password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "passwordLogin.password"
        }

        return NSLocalizedString("passwordLogin.password", tableName: "Login", bundle: bundle, value: "Password", comment: "")
      }

      /// Base translation: Please authorize
      ///
      /// Locales: Base, ja
      static func progressDialogPleaseAuthorize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.pleaseAuthorize", tableName: "Login", bundle: hostingBundle, value: "Please authorize", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.pleaseAuthorize"
        }

        return NSLocalizedString("progressDialog.pleaseAuthorize", tableName: "Login", bundle: bundle, value: "Please authorize", comment: "")
      }

      /// Base translation: Please input mastodon instance
      ///
      /// Locales: Base, ja
      static func pleaseInputMastodonInstance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pleaseInputMastodonInstance", tableName: "Login", bundle: hostingBundle, value: "Please input mastodon instance", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "pleaseInputMastodonInstance"
        }

        return NSLocalizedString("pleaseInputMastodonInstance", tableName: "Login", bundle: bundle, value: "Please input mastodon instance", comment: "")
      }

      /// Base translation: Registering app to server...
      ///
      /// Locales: Base, ja
      static func progressDialogRegisteringApplication(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.registeringApplication", tableName: "Login", bundle: hostingBundle, value: "Registering app to server...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.registeringApplication"
        }

        return NSLocalizedString("progressDialog.registeringApplication", tableName: "Login", bundle: bundle, value: "Registering app to server...", comment: "")
      }

      /// Base translation: Rules of this server
      ///
      /// Locales: Base, ja
      static func authorizeTosRules(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.tos.rules", tableName: "Login", bundle: hostingBundle, value: "Rules of this server", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.tos.rules"
        }

        return NSLocalizedString("authorize.tos.rules", tableName: "Login", bundle: bundle, value: "Rules of this server", comment: "")
      }

      /// Base translation: Terms of Service of this server
      ///
      /// Locales: Base, ja
      static func authorizeTosTermsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.tos.termsOfService", tableName: "Login", bundle: hostingBundle, value: "Terms of Service of this server", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.tos.termsOfService"
        }

        return NSLocalizedString("authorize.tos.termsOfService", tableName: "Login", bundle: bundle, value: "Terms of Service of this server", comment: "")
      }

      /// Base translation: Welcome, %@
      ///
      /// Locales: Base, ja
      static func welcomeMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("welcome.message", tableName: "Login", bundle: hostingBundle, value: "Welcome,\n%@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "welcome.message"
        }

        let format = NSLocalizedString("welcome.message", tableName: "Login", bundle: bundle, value: "Welcome,\n%@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.newPost` struct is generated, and contains static references to 8 localization keys.
    struct newPost {
      /// en translation:  0
      ///
      /// Locales: en, ja
      static let zg4V9GJNormalTitle = Rswift.StringResource(key: "9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: CW
      ///
      /// Locales: en, ja
      static let paxYe0d9Title = Rswift.StringResource(key: "pax-Ye-0d9.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: CW Warning text (Optional)
      ///
      /// Locales: en, ja
      static let ncKaJwdPlaceholder = Rswift.StringResource(key: "8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Compose Post
      ///
      /// Locales: en, ja
      static let lfAApGmeTitle = Rswift.StringResource(key: "LfA-Ap-gme.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NSFW
      ///
      /// Locales: en, ja
      static let pddnqDhaTitle = Rswift.StringResource(key: "PDD-NQ-dha.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, ja
      static let vdu9C5JKTitle = Rswift.StringResource(key: "vdu-9C-5JK.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Siri
      ///
      /// Locales: en, ja
      static let nxvAb3PETitle = Rswift.StringResource(key: "NXV-Ab-3PE.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: rin@mastodon.example.com Reply to: @uzuki: 凛ちゃんとデートです♪
      ///
      /// Locales: en, ja
      static let jxIaK2aText = Rswift.StringResource(key: "3JX-ia-k2a.text", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)

      /// en translation:  0
      ///
      /// Locales: en, ja
      static func zg4V9GJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "9zg-4V-9GJ.normalTitle"
        }

        return NSLocalizedString("9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: CW
      ///
      /// Locales: en, ja
      static func paxYe0d9Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pax-Ye-0d9.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "pax-Ye-0d9.title"
        }

        return NSLocalizedString("pax-Ye-0d9.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: CW Warning text (Optional)
      ///
      /// Locales: en, ja
      static func ncKaJwdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "8NC-Ka-Jwd.placeholder"
        }

        return NSLocalizedString("8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: Compose Post
      ///
      /// Locales: en, ja
      static func lfAApGmeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LfA-Ap-gme.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "LfA-Ap-gme.title"
        }

        return NSLocalizedString("LfA-Ap-gme.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: NSFW
      ///
      /// Locales: en, ja
      static func pddnqDhaTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PDD-NQ-dha.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "PDD-NQ-dha.title"
        }

        return NSLocalizedString("PDD-NQ-dha.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, ja
      static func vdu9C5JKTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vdu-9C-5JK.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "vdu-9C-5JK.title"
        }

        return NSLocalizedString("vdu-9C-5JK.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: Siri
      ///
      /// Locales: en, ja
      static func nxvAb3PETitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NXV-Ab-3PE.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "NXV-Ab-3PE.title"
        }

        return NSLocalizedString("NXV-Ab-3PE.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// en translation: rin@mastodon.example.com Reply to: @uzuki: 凛ちゃんとデートです♪
      ///
      /// Locales: en, ja
      static func jxIaK2aText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3JX-ia-k2a.text", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "3JX-ia-k2a.text"
        }

        return NSLocalizedString("3JX-ia-k2a.text", tableName: "NewPost", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.notification` struct is generated, and contains static references to 7 localization keys.
    struct notification {
      /// Base translation: @%@ boosted your toot
      ///
      /// Locales: Base, ja
      static let typesBoost = Rswift.StringResource(key: "types.boost", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: @%@ favorited your toot
      ///
      /// Locales: Base, ja
      static let typesFavourite = Rswift.StringResource(key: "types.favourite", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: @%@ followed you
      ///
      /// Locales: Base, ja
      static let typesFollow = Rswift.StringResource(key: "types.follow", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: @%@ mentioned you
      ///
      /// Locales: Base, ja
      static let typesMention = Rswift.StringResource(key: "types.mention", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: A poll you voted has ended
      ///
      /// Locales: Base, ja
      static let typesPollNotowner = Rswift.StringResource(key: "types.poll.notowner", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Unknown Notification: %@
      ///
      /// Locales: Base, ja
      static let typesUnknown = Rswift.StringResource(key: "types.unknown", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Your poll has ended
      ///
      /// Locales: Base, ja
      static let typesPollOwner = Rswift.StringResource(key: "types.poll.owner", tableName: "Notification", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)

      /// Base translation: @%@ boosted your toot
      ///
      /// Locales: Base, ja
      static func typesBoost(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.boost", tableName: "Notification", bundle: hostingBundle, value: "@%@ boosted your toot", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.boost"
        }

        let format = NSLocalizedString("types.boost", tableName: "Notification", bundle: bundle, value: "@%@ boosted your toot", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: @%@ favorited your toot
      ///
      /// Locales: Base, ja
      static func typesFavourite(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.favourite", tableName: "Notification", bundle: hostingBundle, value: "@%@ favorited your toot", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.favourite"
        }

        let format = NSLocalizedString("types.favourite", tableName: "Notification", bundle: bundle, value: "@%@ favorited your toot", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: @%@ followed you
      ///
      /// Locales: Base, ja
      static func typesFollow(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.follow", tableName: "Notification", bundle: hostingBundle, value: "@%@ followed you", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.follow"
        }

        let format = NSLocalizedString("types.follow", tableName: "Notification", bundle: bundle, value: "@%@ followed you", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: @%@ mentioned you
      ///
      /// Locales: Base, ja
      static func typesMention(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.mention", tableName: "Notification", bundle: hostingBundle, value: "@%@ mentioned you", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.mention"
        }

        let format = NSLocalizedString("types.mention", tableName: "Notification", bundle: bundle, value: "@%@ mentioned you", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: A poll you voted has ended
      ///
      /// Locales: Base, ja
      static func typesPollNotowner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("types.poll.notowner", tableName: "Notification", bundle: hostingBundle, value: "A poll you voted has ended", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.poll.notowner"
        }

        return NSLocalizedString("types.poll.notowner", tableName: "Notification", bundle: bundle, value: "A poll you voted has ended", comment: "")
      }

      /// Base translation: Unknown Notification: %@
      ///
      /// Locales: Base, ja
      static func typesUnknown(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.unknown", tableName: "Notification", bundle: hostingBundle, value: "Unknown Notification: %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.unknown"
        }

        let format = NSLocalizedString("types.unknown", tableName: "Notification", bundle: bundle, value: "Unknown Notification: %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Your poll has ended
      ///
      /// Locales: Base, ja
      static func typesPollOwner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("types.poll.owner", tableName: "Notification", bundle: hostingBundle, value: "Your poll has ended", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.poll.owner"
        }

        return NSLocalizedString("types.poll.owner", tableName: "Notification", bundle: bundle, value: "Your poll has ended", comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.search` struct is generated, and contains static references to 5 localization keys.
    struct search {
      /// Base translation: Accounts
      ///
      /// Locales: Base, ja
      static let sectionsAccountsTitle = Rswift.StringResource(key: "sections.accounts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Hashtags
      ///
      /// Locales: Base, ja
      static let sectionsHashtagsTitle = Rswift.StringResource(key: "sections.hashtags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Posts
      ///
      /// Locales: Base, ja
      static let sectionsPostsTitle = Rswift.StringResource(key: "sections.posts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Search
      ///
      /// Locales: Base, ja
      static let title = Rswift.StringResource(key: "title", tableName: "Search", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Trend tags (Updated: %@)
      ///
      /// Locales: Base, ja
      static let sectionsTrendTagsTitle = Rswift.StringResource(key: "sections.trendTags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)

      /// Base translation: Accounts
      ///
      /// Locales: Base, ja
      static func sectionsAccountsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sections.accounts.title", tableName: "Search", bundle: hostingBundle, value: "Accounts", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.accounts.title"
        }

        return NSLocalizedString("sections.accounts.title", tableName: "Search", bundle: bundle, value: "Accounts", comment: "")
      }

      /// Base translation: Hashtags
      ///
      /// Locales: Base, ja
      static func sectionsHashtagsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sections.hashtags.title", tableName: "Search", bundle: hostingBundle, value: "Hashtags", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.hashtags.title"
        }

        return NSLocalizedString("sections.hashtags.title", tableName: "Search", bundle: bundle, value: "Hashtags", comment: "")
      }

      /// Base translation: Posts
      ///
      /// Locales: Base, ja
      static func sectionsPostsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sections.posts.title", tableName: "Search", bundle: hostingBundle, value: "Posts", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.posts.title"
        }

        return NSLocalizedString("sections.posts.title", tableName: "Search", bundle: bundle, value: "Posts", comment: "")
      }

      /// Base translation: Search
      ///
      /// Locales: Base, ja
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Search", bundle: hostingBundle, value: "Search", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Search", bundle: bundle, value: "Search", comment: "")
      }

      /// Base translation: Trend tags (Updated: %@)
      ///
      /// Locales: Base, ja
      static func sectionsTrendTagsTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("sections.trendTags.title", tableName: "Search", bundle: hostingBundle, value: "Trend tags (Updated: %@)", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.trendTags.title"
        }

        let format = NSLocalizedString("sections.trendTags.title", tableName: "Search", bundle: bundle, value: "Trend tags (Updated: %@)", comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.userProfile` struct is generated, and contains static references to 18 localization keys.
    struct userProfile {
      /// Base translation: Actions
      ///
      /// Locales: Base, ja
      static let actionsTitle = Rswift.StringResource(key: "actions.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Block
      ///
      /// Locales: Base, ja
      static let actionsBlock = Rswift.StringResource(key: "actions.block", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Cancel
      ///
      /// Locales: Base, ja
      static let actionsCancel = Rswift.StringResource(key: "actions.cancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Cancel follow request
      ///
      /// Locales: Base, ja
      static let actionsFollowRequestCancel = Rswift.StringResource(key: "actions.followRequestCancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Card
      ///
      /// Locales: Base, ja
      static let actionsProfileCard = Rswift.StringResource(key: "actions.profileCard", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Created At
      ///
      /// Locales: Base, ja
      static let cellsCreatedAtTitle = Rswift.StringResource(key: "cells.createdAt.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Follow
      ///
      /// Locales: Base, ja
      static let actionsFollow = Rswift.StringResource(key: "actions.follow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Followers
      ///
      /// Locales: Base, ja
      static let cellsFollowersTitle = Rswift.StringResource(key: "cells.followers.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Following
      ///
      /// Locales: Base, ja
      static let cellsFollowingTitle = Rswift.StringResource(key: "cells.following.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Mute
      ///
      /// Locales: Base, ja
      static let actionsMute = Rswift.StringResource(key: "actions.mute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Pending follow requests
      ///
      /// Locales: Base, ja
      static let actionsFollowRequestsList = Rswift.StringResource(key: "actions.followRequestsList", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Profile
      ///
      /// Locales: Base, ja
      static let title = Rswift.StringResource(key: "title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Share
      ///
      /// Locales: Base, ja
      static let actionsShare = Rswift.StringResource(key: "actions.share", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Since this user is belonged to another instance, some informations may not be accurate.
      ///
      /// Locales: Base, ja
      static let federatedUserWarning = Rswift.StringResource(key: "federatedUserWarning", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Toots
      ///
      /// Locales: Base, ja
      static let cellsTootsTitle = Rswift.StringResource(key: "cells.toots.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Unblock
      ///
      /// Locales: Base, ja
      static let actionsUnblock = Rswift.StringResource(key: "actions.unblock", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Unfollow
      ///
      /// Locales: Base, ja
      static let actionsUnfollow = Rswift.StringResource(key: "actions.unfollow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)
      /// Base translation: Unmute
      ///
      /// Locales: Base, ja
      static let actionsUnmute = Rswift.StringResource(key: "actions.unmute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["Base", "ja"], comment: nil)

      /// Base translation: Actions
      ///
      /// Locales: Base, ja
      static func actionsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.title", tableName: "UserProfile", bundle: hostingBundle, value: "Actions", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.title"
        }

        return NSLocalizedString("actions.title", tableName: "UserProfile", bundle: bundle, value: "Actions", comment: "")
      }

      /// Base translation: Block
      ///
      /// Locales: Base, ja
      static func actionsBlock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.block", tableName: "UserProfile", bundle: hostingBundle, value: "Block", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.block"
        }

        return NSLocalizedString("actions.block", tableName: "UserProfile", bundle: bundle, value: "Block", comment: "")
      }

      /// Base translation: Cancel
      ///
      /// Locales: Base, ja
      static func actionsCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.cancel", tableName: "UserProfile", bundle: hostingBundle, value: "Cancel", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.cancel"
        }

        return NSLocalizedString("actions.cancel", tableName: "UserProfile", bundle: bundle, value: "Cancel", comment: "")
      }

      /// Base translation: Cancel follow request
      ///
      /// Locales: Base, ja
      static func actionsFollowRequestCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.followRequestCancel", tableName: "UserProfile", bundle: hostingBundle, value: "Cancel follow request", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.followRequestCancel"
        }

        return NSLocalizedString("actions.followRequestCancel", tableName: "UserProfile", bundle: bundle, value: "Cancel follow request", comment: "")
      }

      /// Base translation: Card
      ///
      /// Locales: Base, ja
      static func actionsProfileCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.profileCard", tableName: "UserProfile", bundle: hostingBundle, value: "Card", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.profileCard"
        }

        return NSLocalizedString("actions.profileCard", tableName: "UserProfile", bundle: bundle, value: "Card", comment: "")
      }

      /// Base translation: Created At
      ///
      /// Locales: Base, ja
      static func cellsCreatedAtTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.createdAt.title", tableName: "UserProfile", bundle: hostingBundle, value: "Created At", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.createdAt.title"
        }

        return NSLocalizedString("cells.createdAt.title", tableName: "UserProfile", bundle: bundle, value: "Created At", comment: "")
      }

      /// Base translation: Follow
      ///
      /// Locales: Base, ja
      static func actionsFollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.follow", tableName: "UserProfile", bundle: hostingBundle, value: "Follow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.follow"
        }

        return NSLocalizedString("actions.follow", tableName: "UserProfile", bundle: bundle, value: "Follow", comment: "")
      }

      /// Base translation: Followers
      ///
      /// Locales: Base, ja
      static func cellsFollowersTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.followers.title", tableName: "UserProfile", bundle: hostingBundle, value: "Followers", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.followers.title"
        }

        return NSLocalizedString("cells.followers.title", tableName: "UserProfile", bundle: bundle, value: "Followers", comment: "")
      }

      /// Base translation: Following
      ///
      /// Locales: Base, ja
      static func cellsFollowingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.following.title", tableName: "UserProfile", bundle: hostingBundle, value: "Following", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.following.title"
        }

        return NSLocalizedString("cells.following.title", tableName: "UserProfile", bundle: bundle, value: "Following", comment: "")
      }

      /// Base translation: Mute
      ///
      /// Locales: Base, ja
      static func actionsMute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.mute", tableName: "UserProfile", bundle: hostingBundle, value: "Mute", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.mute"
        }

        return NSLocalizedString("actions.mute", tableName: "UserProfile", bundle: bundle, value: "Mute", comment: "")
      }

      /// Base translation: Pending follow requests
      ///
      /// Locales: Base, ja
      static func actionsFollowRequestsList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.followRequestsList", tableName: "UserProfile", bundle: hostingBundle, value: "Pending follow requests", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.followRequestsList"
        }

        return NSLocalizedString("actions.followRequestsList", tableName: "UserProfile", bundle: bundle, value: "Pending follow requests", comment: "")
      }

      /// Base translation: Profile
      ///
      /// Locales: Base, ja
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "UserProfile", bundle: hostingBundle, value: "Profile", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "UserProfile", bundle: bundle, value: "Profile", comment: "")
      }

      /// Base translation: Share
      ///
      /// Locales: Base, ja
      static func actionsShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.share", tableName: "UserProfile", bundle: hostingBundle, value: "Share", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.share"
        }

        return NSLocalizedString("actions.share", tableName: "UserProfile", bundle: bundle, value: "Share", comment: "")
      }

      /// Base translation: Since this user is belonged to another instance, some informations may not be accurate.
      ///
      /// Locales: Base, ja
      static func federatedUserWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("federatedUserWarning", tableName: "UserProfile", bundle: hostingBundle, value: "Since this user is belonged to another instance, some informations may not be accurate.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "federatedUserWarning"
        }

        return NSLocalizedString("federatedUserWarning", tableName: "UserProfile", bundle: bundle, value: "Since this user is belonged to another instance, some informations may not be accurate.", comment: "")
      }

      /// Base translation: Toots
      ///
      /// Locales: Base, ja
      static func cellsTootsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.toots.title", tableName: "UserProfile", bundle: hostingBundle, value: "Toots", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.toots.title"
        }

        return NSLocalizedString("cells.toots.title", tableName: "UserProfile", bundle: bundle, value: "Toots", comment: "")
      }

      /// Base translation: Unblock
      ///
      /// Locales: Base, ja
      static func actionsUnblock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.unblock", tableName: "UserProfile", bundle: hostingBundle, value: "Unblock", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.unblock"
        }

        return NSLocalizedString("actions.unblock", tableName: "UserProfile", bundle: bundle, value: "Unblock", comment: "")
      }

      /// Base translation: Unfollow
      ///
      /// Locales: Base, ja
      static func actionsUnfollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.unfollow", tableName: "UserProfile", bundle: hostingBundle, value: "Unfollow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.unfollow"
        }

        return NSLocalizedString("actions.unfollow", tableName: "UserProfile", bundle: bundle, value: "Unfollow", comment: "")
      }

      /// Base translation: Unmute
      ///
      /// Locales: Base, ja
      static func actionsUnmute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.unmute", tableName: "UserProfile", bundle: hostingBundle, value: "Unmute", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.unmute"
        }

        return NSLocalizedString("actions.unmute", tableName: "UserProfile", bundle: bundle, value: "Unmute", comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AddAccountSuccessViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddAccountSuccessViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NewPostMediaListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NewPostMediaListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationTableViewCell

      let bundle = R.hostingBundle
      let identifier = "notificationTableViewCell"
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      fileprivate init() {}
    }

    struct _UserProfileBioTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileBioTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileBioTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
      }

      fileprivate init() {}
    }

    struct _UserProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try newPost.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileCard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct newPost: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewPostViewController

      let bundle = R.hostingBundle
      let name = "NewPost"

      static func validate() throws {
        if UIKit.UIImage(named: "ArrowUp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowUp' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera.fill' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "music.note", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'music.note' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visibility-public", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visibility-public' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileCard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileCardViewController

      let bundle = R.hostingBundle
      let name = "ProfileCard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
