//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewPost`.
    static let newPost = _R.storyboard.newPost()
    /// Storyboard `ProfileCard`.
    static let profileCard = _R.storyboard.profileCard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NewPost", bundle: ...)`
    static func newPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newPost)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileCard", bundle: ...)`
    static func profileCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileCard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `BarBoost`.
    static let barBoost = Rswift.ColorResource(bundle: R.hostingBundle, name: "BarBoost")
    /// Color `BarFavourite`.
    static let barFavourite = Rswift.ColorResource(bundle: R.hostingBundle, name: "BarFavourite")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BarBoost", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func barBoost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.barBoost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BarFavourite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func barFavourite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.barFavourite, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 10 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "production"
    static let comAppleDeveloperSiri = true
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityDeviceCamera = true
    static let comAppleSecurityNetworkClient = true
    static let comAppleSecurityPersonalInformationPhotosLibrary = true

    struct comAppleDeveloperIcloudContainerIdentifiers {
      fileprivate init() {}
    }

    struct comAppleDeveloperIcloudServices {
      static let cloudDocuments = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudDocuments") ?? "CloudDocuments"

      fileprivate init() {}
    }

    struct comAppleDeveloperUbiquityContainerIdentifiers {
      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupJpPronamaImast = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.jp.pronama.imast") ?? "group.jp.pronama.imast"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `emoji.json`.
    static let emojiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emoji", pathExtension: "json")

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "emoji", withExtension: "json")`
    static func emojiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojiJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `ArrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowDown")
    /// Image `ArrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowUp")
    /// Image `Boost`.
    static let boost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Boost")
    /// Image `Follow`.
    static let follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow")
    /// Image `MoreOutline`.
    static let moreOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoreOutline")
    /// Image `More`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "More")
    /// Image `Poll`.
    static let poll = Rswift.ImageResource(bundle: R.hostingBundle, name: "Poll")
    /// Image `Reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reply")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `StreamingStatus`.
    static let streamingStatus = Rswift.ImageResource(bundle: R.hostingBundle, name: "StreamingStatus")
    /// Image `visibility-direct`.
    static let visibilityDirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-direct")
    /// Image `visibility-private`.
    static let visibilityPrivate = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-private")
    /// Image `visibility-public`.
    static let visibilityPublic = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-public")
    /// Image `visibility-unlisted`.
    static let visibilityUnlisted = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-unlisted")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Boost", bundle: ..., traitCollection: ...)`
    static func boost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Follow", bundle: ..., traitCollection: ...)`
    static func follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "More", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoreOutline", bundle: ..., traitCollection: ...)`
    static func moreOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Poll", bundle: ..., traitCollection: ...)`
    static func poll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poll, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StreamingStatus", bundle: ..., traitCollection: ...)`
    static func streamingStatus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.streamingStatus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-direct", bundle: ..., traitCollection: ...)`
    static func visibilityDirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityDirect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-private", bundle: ..., traitCollection: ...)`
    static func visibilityPrivate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPrivate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-public", bundle: ..., traitCollection: ...)`
    static func visibilityPublic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPublic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-unlisted", bundle: ..., traitCollection: ...)`
    static func visibilityUnlisted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityUnlisted, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 3 properties.
  struct info {
    struct nsUserActivityTypes {
      static let tootIntent = infoPlistString(path: ["NSUserActivityTypes"], key: "TootIntent") ?? "TootIntent"

      fileprivate init() {}
    }

    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    struct uiApplicationShortcutItems {
      struct product_BUNDLE_IDENTIFIERNewPost {
        static let _key = "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"
        static let uiApplicationShortcutItemIconType = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"], key: "UIApplicationShortcutItemIconType") ?? "UIApplicationShortcutIconTypeCompose"
        static let uiApplicationShortcutItemTitle = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"], key: "UIApplicationShortcutItemTitle") ?? "新規投稿"
        static let uiApplicationShortcutItemType = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"], key: "UIApplicationShortcutItemType") ?? "$(PRODUCT_BUNDLE_IDENTIFIER).NewPost"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AddAccountSuccessViewController`.
    static let addAccountSuccessViewController = _R.nib._AddAccountSuccessViewController()
    /// Nib `NewPostMediaListViewController`.
    static let newPostMediaListViewController = _R.nib._NewPostMediaListViewController()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `UserProfileBioTableViewCell`.
    static let userProfileBioTableViewCell = _R.nib._UserProfileBioTableViewCell()
    /// Nib `UserProfileInfoTableViewCell`.
    static let userProfileInfoTableViewCell = _R.nib._UserProfileInfoTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddAccountSuccessViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addAccountSuccessViewController) instead")
    static func addAccountSuccessViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAccountSuccessViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewPostMediaListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newPostMediaListViewController) instead")
    static func newPostMediaListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newPostMediaListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserProfileBioTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userProfileBioTableViewCell) instead")
    static func userProfileBioTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileBioTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserProfileInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userProfileInfoTableViewCell) instead")
    static func userProfileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileInfoTableViewCell)
    }
    #endif

    static func addAccountSuccessViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addAccountSuccessViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func newPostMediaListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.newPostMediaListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func userProfileBioTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileBioTableViewCell? {
      return R.nib.userProfileBioTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
    }

    static func userProfileInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileInfoTableViewCell? {
      return R.nib.userProfileInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `notificationTableViewCell`.
    static let notificationTableViewCell: Rswift.ReuseIdentifier<NotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "notificationTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 8 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 43 localization keys.
    struct localizable {
      /// ja translation: #imast_ios を付けて投稿する
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppTootWithHashtag = Rswift.StringResource(key: "aboutThisApp.tootWithHashtag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: %@ に切り替え
      ///
      /// Locales: ja
      static let switchTab = Rswift.StringResource(key: "switchTab", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: App Store でレビューする
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppReviewInAppStore = Rswift.StringResource(key: "aboutThisApp.reviewInAppStore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: GitHub で Star する
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppStarInGitHub = Rswift.StringResource(key: "aboutThisApp.starInGitHub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: LTL
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let localTimelineShort = Rswift.StringResource(key: "localTimeline.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: Streaming
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let streaming = Rswift.StringResource(key: "streaming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ここまで
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let nothingMore = Rswift.StringResource(key: "nothingMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: このAppについて
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppTitle = Rswift.StringResource(key: "aboutThisApp.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: この機能はMastodonインスタンスのバージョンが%@以上でないと利用できません。 (iMastを起動中にインスタンスがアップデートされた場合は、アプリを再起動すると利用できるようになります) Mastodonインスタンスのアップデート予定については、各インスタンスの管理者にお尋ねください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorRequiredNewerMastodon = Rswift.StringResource(key: "error.requiredNewerMastodon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: この機能を利用するためには iOS %.1f 以上が必要です。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorRequiredNewerOS = Rswift.StringResource(key: "error.requiredNewerOS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: その他
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ふぁぼ一覧
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let favouritesList = Rswift.StringResource(key: "favouritesList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ほめる
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppPraise = Rswift.StringResource(key: "aboutThisApp.praise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: もしよければ、このアラートがどのような条件で出たか、以下のコードを添えて @imast_ios@mstdn.rinsuki.net までお知らせください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorUnknownText = Rswift.StringResource(key: "error.unknown.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: もっと
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let readmore = Rswift.StringResource(key: "readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: アカウントを変更
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let switchActiveAccount = Rswift.StringResource(key: "switchActiveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: インスタンスを入力してください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorPleaseInputInstance = Rswift.StringResource(key: "error.pleaseInputInstance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: エラー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: キャンセル
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ブックマーク
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let bookmarks = Rswift.StringResource(key: "bookmarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ヘルプ
      ///
      /// Locales: ja
      static let helpTitle = Rswift.StringResource(key: "help.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ヘルプ / Feedback
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let helpAndFeedback = Rswift.StringResource(key: "helpAndFeedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ホーム
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let homeTimelineShort = Rswift.StringResource(key: "homeTimeline.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ホームタイムライン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let homeTimeline = Rswift.StringResource(key: "homeTimeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: リスト
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let lists = Rswift.StringResource(key: "lists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ローカルタイムライン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let localTimeline = Rswift.StringResource(key: "localTimeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 作者
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppAuthor = Rswift.StringResource(key: "aboutThisApp.author", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 使用するアカウントを選択
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let chooseAccount = Rswift.StringResource(key: "chooseAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 再取得
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let refetch = Rswift.StringResource(key: "refetch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 切断
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let disconnect = Rswift.StringResource(key: "disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 取得失敗
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let fetchFailed = Rswift.StringResource(key: "fetchFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let post = Rswift.StringResource(key: "post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 接続
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let connect = Rswift.StringResource(key: "connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 接続していません
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let notConnected = Rswift.StringResource(key: "notConnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 接続中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let connected = Rswift.StringResource(key: "connected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 文脈
      ///
      /// Locales: ja
      static let bunmyakuTitle = Rswift.StringResource(key: "bunmyaku.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 状態: %@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let streamingStatus = Rswift.StringResource(key: "streamingStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 現在のアカウント: @%@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let currentAccount = Rswift.StringResource(key: "currentAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 翻訳してくれた人たち
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let aboutThisAppTranslators = Rswift.StringResource(key: "aboutThisApp.translators", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 自分のプロフィール
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let myProfile = Rswift.StringResource(key: "myProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 設定
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 謎のエラー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorUnknownTitle = Rswift.StringResource(key: "error.unknown.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 通知
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)

      /// ja translation: #imast_ios を付けて投稿する
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppTootWithHashtag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.tootWithHashtag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.tootWithHashtag"
        }

        return NSLocalizedString("aboutThisApp.tootWithHashtag", bundle: bundle, comment: "")
      }

      /// ja translation: %@ に切り替え
      ///
      /// Locales: ja
      static func switchTab(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("switchTab", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchTab"
        }

        let format = NSLocalizedString("switchTab", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: App Store でレビューする
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppReviewInAppStore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.reviewInAppStore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.reviewInAppStore"
        }

        return NSLocalizedString("aboutThisApp.reviewInAppStore", bundle: bundle, comment: "")
      }

      /// ja translation: GitHub で Star する
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppStarInGitHub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.starInGitHub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.starInGitHub"
        }

        return NSLocalizedString("aboutThisApp.starInGitHub", bundle: bundle, comment: "")
      }

      /// ja translation: LTL
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func localTimelineShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("localTimeline.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "localTimeline.short"
        }

        return NSLocalizedString("localTimeline.short", bundle: bundle, comment: "")
      }

      /// ja translation: Streaming
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func streaming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("streaming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "streaming"
        }

        return NSLocalizedString("streaming", bundle: bundle, comment: "")
      }

      /// ja translation: ここまで
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func nothingMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nothingMore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nothingMore"
        }

        return NSLocalizedString("nothingMore", bundle: bundle, comment: "")
      }

      /// ja translation: このAppについて
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.title"
        }

        return NSLocalizedString("aboutThisApp.title", bundle: bundle, comment: "")
      }

      /// ja translation: この機能はMastodonインスタンスのバージョンが%@以上でないと利用できません。 (iMastを起動中にインスタンスがアップデートされた場合は、アプリを再起動すると利用できるようになります) Mastodonインスタンスのアップデート予定については、各インスタンスの管理者にお尋ねください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorRequiredNewerMastodon(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("error.requiredNewerMastodon", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.requiredNewerMastodon"
        }

        let format = NSLocalizedString("error.requiredNewerMastodon", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: この機能を利用するためには iOS %.1f 以上が必要です。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorRequiredNewerOS(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("error.requiredNewerOS", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.requiredNewerOS"
        }

        let format = NSLocalizedString("error.requiredNewerOS", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: その他
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other"
        }

        return NSLocalizedString("other", bundle: bundle, comment: "")
      }

      /// ja translation: ふぁぼ一覧
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func favouritesList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favouritesList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "favouritesList"
        }

        return NSLocalizedString("favouritesList", bundle: bundle, comment: "")
      }

      /// ja translation: ほめる
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppPraise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.praise", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.praise"
        }

        return NSLocalizedString("aboutThisApp.praise", bundle: bundle, comment: "")
      }

      /// ja translation: もしよければ、このアラートがどのような条件で出たか、以下のコードを添えて @imast_ios@mstdn.rinsuki.net までお知らせください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorUnknownText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.unknown.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.unknown.text"
        }

        return NSLocalizedString("error.unknown.text", bundle: bundle, comment: "")
      }

      /// ja translation: もっと
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "readmore"
        }

        return NSLocalizedString("readmore", bundle: bundle, comment: "")
      }

      /// ja translation: アカウントを変更
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func switchActiveAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("switchActiveAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchActiveAccount"
        }

        return NSLocalizedString("switchActiveAccount", bundle: bundle, comment: "")
      }

      /// ja translation: インスタンスを入力してください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorPleaseInputInstance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.pleaseInputInstance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.pleaseInputInstance"
        }

        return NSLocalizedString("error.pleaseInputInstance", bundle: bundle, comment: "")
      }

      /// ja translation: エラー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.title"
        }

        return NSLocalizedString("error.title", bundle: bundle, comment: "")
      }

      /// ja translation: キャンセル
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// ja translation: ブックマーク
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func bookmarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bookmarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bookmarks"
        }

        return NSLocalizedString("bookmarks", bundle: bundle, comment: "")
      }

      /// ja translation: ヘルプ
      ///
      /// Locales: ja
      static func helpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help.title"
        }

        return NSLocalizedString("help.title", bundle: bundle, comment: "")
      }

      /// ja translation: ヘルプ / Feedback
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func helpAndFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpAndFeedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpAndFeedback"
        }

        return NSLocalizedString("helpAndFeedback", bundle: bundle, comment: "")
      }

      /// ja translation: ホーム
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func homeTimelineShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeTimeline.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "homeTimeline.short"
        }

        return NSLocalizedString("homeTimeline.short", bundle: bundle, comment: "")
      }

      /// ja translation: ホームタイムライン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func homeTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeTimeline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "homeTimeline"
        }

        return NSLocalizedString("homeTimeline", bundle: bundle, comment: "")
      }

      /// ja translation: リスト
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func lists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lists"
        }

        return NSLocalizedString("lists", bundle: bundle, comment: "")
      }

      /// ja translation: ローカルタイムライン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func localTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("localTimeline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "localTimeline"
        }

        return NSLocalizedString("localTimeline", bundle: bundle, comment: "")
      }

      /// ja translation: 作者
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppAuthor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.author", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.author"
        }

        return NSLocalizedString("aboutThisApp.author", bundle: bundle, comment: "")
      }

      /// ja translation: 使用するアカウントを選択
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func chooseAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseAccount"
        }

        return NSLocalizedString("chooseAccount", bundle: bundle, comment: "")
      }

      /// ja translation: 再取得
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func refetch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refetch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "refetch"
        }

        return NSLocalizedString("refetch", bundle: bundle, comment: "")
      }

      /// ja translation: 切断
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func disconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disconnect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disconnect"
        }

        return NSLocalizedString("disconnect", bundle: bundle, comment: "")
      }

      /// ja translation: 取得失敗
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func fetchFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fetchFailed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fetchFailed"
        }

        return NSLocalizedString("fetchFailed", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func post(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "post"
        }

        return NSLocalizedString("post", bundle: bundle, comment: "")
      }

      /// ja translation: 接続
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect"
        }

        return NSLocalizedString("connect", bundle: bundle, comment: "")
      }

      /// ja translation: 接続していません
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func notConnected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notConnected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notConnected"
        }

        return NSLocalizedString("notConnected", bundle: bundle, comment: "")
      }

      /// ja translation: 接続中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func connected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connected"
        }

        return NSLocalizedString("connected", bundle: bundle, comment: "")
      }

      /// ja translation: 文脈
      ///
      /// Locales: ja
      static func bunmyakuTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bunmyaku.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bunmyaku.title"
        }

        return NSLocalizedString("bunmyaku.title", bundle: bundle, comment: "")
      }

      /// ja translation: 状態: %@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func streamingStatus(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("streamingStatus", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "streamingStatus"
        }

        let format = NSLocalizedString("streamingStatus", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: 現在のアカウント: @%@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func currentAccount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("currentAccount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currentAccount"
        }

        let format = NSLocalizedString("currentAccount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: 翻訳してくれた人たち
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func aboutThisAppTranslators(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutThisApp.translators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutThisApp.translators"
        }

        return NSLocalizedString("aboutThisApp.translators", bundle: bundle, comment: "")
      }

      /// ja translation: 自分のプロフィール
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myProfile"
        }

        return NSLocalizedString("myProfile", bundle: bundle, comment: "")
      }

      /// ja translation: 設定
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// ja translation: 謎のエラー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorUnknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.unknown.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.unknown.title"
        }

        return NSLocalizedString("error.unknown.title", bundle: bundle, comment: "")
      }

      /// ja translation: 通知
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifications"
        }

        return NSLocalizedString("notifications", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.login` struct is generated, and contains static references to 16 localization keys.
    struct login {
      /// ja translation: Mastodonのインスタンスを入力してください
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let pleaseInputMastodonInstance = Rswift.StringResource(key: "pleaseInputMastodonInstance", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: Safariでログイン (推奨)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let authorizeMethodSafari = Rswift.StringResource(key: "authorize.method.safari", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: このサーバーのルール
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let authorizeTosRules = Rswift.StringResource(key: "authorize.tos.rules", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: このサーバーの利用規約
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let authorizeTosTermsOfService = Rswift.StringResource(key: "authorize.tos.termsOfService", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ようこそ、 %@ さん。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let welcomeMessage = Rswift.StringResource(key: "welcome.message", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: アプリをサーバーに登録中…
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let progressDialogRegisteringApplication = Rswift.StringResource(key: "progressDialog.registeringApplication", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: サーバーの情報を取得中…
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let progressDialogFetchingServerInfo = Rswift.StringResource(key: "progressDialog.fetchingServerInfo", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: タイムラインへ
      ///
      /// Locales: ja
      static let welcomeToTimeline = Rswift.StringResource(key: "welcome.toTimeline", tableName: "Login", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワード
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let passwordLoginPassword = Rswift.StringResource(key: "passwordLogin.password", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: メールアドレス
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let passwordLoginMailAddress = Rswift.StringResource(key: "passwordLogin.mailAddress", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ログイン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let loginButton = Rswift.StringResource(key: "loginButton", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ログイン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let title = Rswift.StringResource(key: "title", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ログインすることで、以下のルールやプライバシーポリシーなどに同意したことになります。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let authorizeTosHeader = Rswift.StringResource(key: "authorize.tos.header", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ログイン中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let progressDialogTitle = Rswift.StringResource(key: "progressDialog.title", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 認証
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let authorizeTitle = Rswift.StringResource(key: "authorize.title", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 認証してください
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let progressDialogPleaseAuthorize = Rswift.StringResource(key: "progressDialog.pleaseAuthorize", tableName: "Login", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)

      /// ja translation: Mastodonのインスタンスを入力してください
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func pleaseInputMastodonInstance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pleaseInputMastodonInstance", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "pleaseInputMastodonInstance"
        }

        return NSLocalizedString("pleaseInputMastodonInstance", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: Safariでログイン (推奨)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func authorizeMethodSafari(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.method.safari", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.method.safari"
        }

        return NSLocalizedString("authorize.method.safari", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: このサーバーのルール
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func authorizeTosRules(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.tos.rules", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.tos.rules"
        }

        return NSLocalizedString("authorize.tos.rules", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: このサーバーの利用規約
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func authorizeTosTermsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.tos.termsOfService", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.tos.termsOfService"
        }

        return NSLocalizedString("authorize.tos.termsOfService", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: ようこそ、 %@ さん。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func welcomeMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("welcome.message", tableName: "Login", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "welcome.message"
        }

        let format = NSLocalizedString("welcome.message", tableName: "Login", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: アプリをサーバーに登録中…
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func progressDialogRegisteringApplication(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.registeringApplication", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.registeringApplication"
        }

        return NSLocalizedString("progressDialog.registeringApplication", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: サーバーの情報を取得中…
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func progressDialogFetchingServerInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.fetchingServerInfo", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.fetchingServerInfo"
        }

        return NSLocalizedString("progressDialog.fetchingServerInfo", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: タイムラインへ
      ///
      /// Locales: ja
      static func welcomeToTimeline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome.toTimeline", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "welcome.toTimeline"
        }

        return NSLocalizedString("welcome.toTimeline", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: パスワード
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func passwordLoginPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordLogin.password", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "passwordLogin.password"
        }

        return NSLocalizedString("passwordLogin.password", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: メールアドレス
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func passwordLoginMailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordLogin.mailAddress", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "passwordLogin.mailAddress"
        }

        return NSLocalizedString("passwordLogin.mailAddress", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: ログイン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func loginButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loginButton", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "loginButton"
        }

        return NSLocalizedString("loginButton", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: ログイン
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: ログインすることで、以下のルールやプライバシーポリシーなどに同意したことになります。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func authorizeTosHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.tos.header", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.tos.header"
        }

        return NSLocalizedString("authorize.tos.header", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: ログイン中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func progressDialogTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.title", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.title"
        }

        return NSLocalizedString("progressDialog.title", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: 認証
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func authorizeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize.title", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "authorize.title"
        }

        return NSLocalizedString("authorize.title", tableName: "Login", bundle: bundle, comment: "")
      }

      /// ja translation: 認証してください
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func progressDialogPleaseAuthorize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progressDialog.pleaseAuthorize", tableName: "Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Login", preferredLanguages: preferredLanguages) else {
          return "progressDialog.pleaseAuthorize"
        }

        return NSLocalizedString("progressDialog.pleaseAuthorize", tableName: "Login", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.newPost` struct is generated, and contains static references to 16 localization keys.
    struct newPost {
      /// ja translation: CW説明文 (省略可能)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let placeholdersCwWarningText = Rswift.StringResource(key: "placeholders.cwWarningText", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ← から画像を追加
      ///
      /// Locales: ja
      static let addImageFromButton = Rswift.StringResource(key: "addImageFromButton", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: フォトライブラリ
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let mediaPickerPhotoLibrary = Rswift.StringResource(key: "media.picker.photoLibrary", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: プレビュー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let mediaPreview = Rswift.StringResource(key: "media.preview", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 写真を撮る
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let mediaPickerTakePhoto = Rswift.StringResource(key: "media.picker.takePhoto", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 削除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let mediaDelete = Rswift.StringResource(key: "media.delete", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let keyCommandSendTitle = Rswift.StringResource(key: "keyCommand.send.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 投稿を送信
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let keyCommandSendDescription = Rswift.StringResource(key: "keyCommand.send.description", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 投稿中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let alertsSendingTitle = Rswift.StringResource(key: "alerts.sending.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 新規投稿
      ///
      /// Locales: ja
      static let keyCommandOpenTitle = Rswift.StringResource(key: "keyCommand.open.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 新規投稿画面を開く
      ///
      /// Locales: ja
      static let keyCommandOpenDescription = Rswift.StringResource(key: "keyCommand.open.description", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 楽曲ライブラリにアクセスできません。設定アプリでiMastに「メディアとApple Music」の権限を付与してください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let errorsDeclineAppleMusicPermission = Rswift.StringResource(key: "errors.declineAppleMusicPermission", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 画像アップロード中 (%1$d/%2$d)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let alertsSendingStepsMediaUpload = Rswift.StringResource(key: "alerts.sending.steps.mediaUpload", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 返信先: %@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let infoTextInReplyTo = Rswift.StringResource(key: "infoText.inReplyTo", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 送信
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let send = Rswift.StringResource(key: "send", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 送信中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let alertsSendingStepsSend = Rswift.StringResource(key: "alerts.sending.steps.send", tableName: "NewPost", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)

      /// ja translation: CW説明文 (省略可能)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func placeholdersCwWarningText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholders.cwWarningText", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "placeholders.cwWarningText"
        }

        return NSLocalizedString("placeholders.cwWarningText", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: ← から画像を追加
      ///
      /// Locales: ja
      static func addImageFromButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addImageFromButton", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "addImageFromButton"
        }

        return NSLocalizedString("addImageFromButton", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: フォトライブラリ
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func mediaPickerPhotoLibrary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("media.picker.photoLibrary", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "media.picker.photoLibrary"
        }

        return NSLocalizedString("media.picker.photoLibrary", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: プレビュー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func mediaPreview(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("media.preview", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "media.preview"
        }

        return NSLocalizedString("media.preview", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 写真を撮る
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func mediaPickerTakePhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("media.picker.takePhoto", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "media.picker.takePhoto"
        }

        return NSLocalizedString("media.picker.takePhoto", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 削除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func mediaDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("media.delete", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "media.delete"
        }

        return NSLocalizedString("media.delete", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func keyCommandSendTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keyCommand.send.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "keyCommand.send.title"
        }

        return NSLocalizedString("keyCommand.send.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿を送信
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func keyCommandSendDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keyCommand.send.description", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "keyCommand.send.description"
        }

        return NSLocalizedString("keyCommand.send.description", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func alertsSendingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts.sending.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "alerts.sending.title"
        }

        return NSLocalizedString("alerts.sending.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 新規投稿
      ///
      /// Locales: ja
      static func keyCommandOpenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keyCommand.open.title", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "keyCommand.open.title"
        }

        return NSLocalizedString("keyCommand.open.title", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 新規投稿画面を開く
      ///
      /// Locales: ja
      static func keyCommandOpenDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keyCommand.open.description", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "keyCommand.open.description"
        }

        return NSLocalizedString("keyCommand.open.description", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 楽曲ライブラリにアクセスできません。設定アプリでiMastに「メディアとApple Music」の権限を付与してください。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func errorsDeclineAppleMusicPermission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errors.declineAppleMusicPermission", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "errors.declineAppleMusicPermission"
        }

        return NSLocalizedString("errors.declineAppleMusicPermission", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 画像アップロード中 (%1$d/%2$d)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func alertsSendingStepsMediaUpload(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("alerts.sending.steps.mediaUpload", tableName: "NewPost", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "alerts.sending.steps.mediaUpload"
        }

        let format = NSLocalizedString("alerts.sending.steps.mediaUpload", tableName: "NewPost", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// ja translation: 返信先: %@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func infoTextInReplyTo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("infoText.inReplyTo", tableName: "NewPost", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "infoText.inReplyTo"
        }

        let format = NSLocalizedString("infoText.inReplyTo", tableName: "NewPost", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: 送信
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "send"
        }

        return NSLocalizedString("send", tableName: "NewPost", bundle: bundle, comment: "")
      }

      /// ja translation: 送信中
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func alertsSendingStepsSend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts.sending.steps.send", tableName: "NewPost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewPost", preferredLanguages: preferredLanguages) else {
          return "alerts.sending.steps.send"
        }

        return NSLocalizedString("alerts.sending.steps.send", tableName: "NewPost", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.notification` struct is generated, and contains static references to 8 localization keys.
    struct notification {
      /// ja translation: @%@さんからのメンション
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesMention = Rswift.StringResource(key: "types.mention", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: @%@さんがあなたをフォローしたいようです
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesFollowRequest = Rswift.StringResource(key: "types.followRequest", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: @%@さんにふぁぼられました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesFavourite = Rswift.StringResource(key: "types.favourite", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: @%@さんにフォローされました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesFollow = Rswift.StringResource(key: "types.follow", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: @%@さんにブーストされました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesBoost = Rswift.StringResource(key: "types.boost", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: あなたが作成した投票が終了しました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesPollOwner = Rswift.StringResource(key: "types.poll.owner", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: あなたが参加した投票が終了しました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesPollNotowner = Rswift.StringResource(key: "types.poll.notowner", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 不明な通知: %@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let typesUnknown = Rswift.StringResource(key: "types.unknown", tableName: "Notification", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)

      /// ja translation: @%@さんからのメンション
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesMention(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.mention", tableName: "Notification", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.mention"
        }

        let format = NSLocalizedString("types.mention", tableName: "Notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: @%@さんがあなたをフォローしたいようです
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesFollowRequest(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.followRequest", tableName: "Notification", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.followRequest"
        }

        let format = NSLocalizedString("types.followRequest", tableName: "Notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: @%@さんにふぁぼられました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesFavourite(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.favourite", tableName: "Notification", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.favourite"
        }

        let format = NSLocalizedString("types.favourite", tableName: "Notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: @%@さんにフォローされました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesFollow(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.follow", tableName: "Notification", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.follow"
        }

        let format = NSLocalizedString("types.follow", tableName: "Notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: @%@さんにブーストされました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesBoost(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.boost", tableName: "Notification", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.boost"
        }

        let format = NSLocalizedString("types.boost", tableName: "Notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: あなたが作成した投票が終了しました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesPollOwner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("types.poll.owner", tableName: "Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.poll.owner"
        }

        return NSLocalizedString("types.poll.owner", tableName: "Notification", bundle: bundle, comment: "")
      }

      /// ja translation: あなたが参加した投票が終了しました
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesPollNotowner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("types.poll.notowner", tableName: "Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.poll.notowner"
        }

        return NSLocalizedString("types.poll.notowner", tableName: "Notification", bundle: bundle, comment: "")
      }

      /// ja translation: 不明な通知: %@
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func typesUnknown(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("types.unknown", tableName: "Notification", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Notification", preferredLanguages: preferredLanguages) else {
          return "types.unknown"
        }

        let format = NSLocalizedString("types.unknown", tableName: "Notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.otherMenu` struct is generated, and contains static references to 5 localization keys.
    struct otherMenu {
      /// ja translation: リスト
      ///
      /// Locales: ja, zh-Hans, en, ko
      static let listsTitle = Rswift.StringResource(key: "lists.title", tableName: "OtherMenu", bundle: R.hostingBundle, locales: ["ja", "zh-Hans", "en", "ko"], comment: nil)
      /// ja translation: リストの名前
      ///
      /// Locales: ja, zh-Hans, en, ko
      static let listsCreateTextFieldNamePlaceholder = Rswift.StringResource(key: "lists.create.textField.name.placeholder", tableName: "OtherMenu", bundle: R.hostingBundle, locales: ["ja", "zh-Hans", "en", "ko"], comment: nil)
      /// ja translation: リストの名前を決めてください
      ///
      /// Locales: ja, zh-Hans, en, ko
      static let listsCreateMessage = Rswift.StringResource(key: "lists.create.message", tableName: "OtherMenu", bundle: R.hostingBundle, locales: ["ja", "zh-Hans", "en", "ko"], comment: nil)
      /// ja translation: リスト作成
      ///
      /// Locales: ja, zh-Hans, en, ko
      static let listsCreateTitle = Rswift.StringResource(key: "lists.create.title", tableName: "OtherMenu", bundle: R.hostingBundle, locales: ["ja", "zh-Hans", "en", "ko"], comment: nil)
      /// ja translation: 作成
      ///
      /// Locales: ja, zh-Hans, en, ko
      static let listsCreateActionsPrimary = Rswift.StringResource(key: "lists.create.actions.primary", tableName: "OtherMenu", bundle: R.hostingBundle, locales: ["ja", "zh-Hans", "en", "ko"], comment: nil)

      /// ja translation: リスト
      ///
      /// Locales: ja, zh-Hans, en, ko
      static func listsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists.title", tableName: "OtherMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OtherMenu", preferredLanguages: preferredLanguages) else {
          return "lists.title"
        }

        return NSLocalizedString("lists.title", tableName: "OtherMenu", bundle: bundle, comment: "")
      }

      /// ja translation: リストの名前
      ///
      /// Locales: ja, zh-Hans, en, ko
      static func listsCreateTextFieldNamePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists.create.textField.name.placeholder", tableName: "OtherMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OtherMenu", preferredLanguages: preferredLanguages) else {
          return "lists.create.textField.name.placeholder"
        }

        return NSLocalizedString("lists.create.textField.name.placeholder", tableName: "OtherMenu", bundle: bundle, comment: "")
      }

      /// ja translation: リストの名前を決めてください
      ///
      /// Locales: ja, zh-Hans, en, ko
      static func listsCreateMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists.create.message", tableName: "OtherMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OtherMenu", preferredLanguages: preferredLanguages) else {
          return "lists.create.message"
        }

        return NSLocalizedString("lists.create.message", tableName: "OtherMenu", bundle: bundle, comment: "")
      }

      /// ja translation: リスト作成
      ///
      /// Locales: ja, zh-Hans, en, ko
      static func listsCreateTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists.create.title", tableName: "OtherMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OtherMenu", preferredLanguages: preferredLanguages) else {
          return "lists.create.title"
        }

        return NSLocalizedString("lists.create.title", tableName: "OtherMenu", bundle: bundle, comment: "")
      }

      /// ja translation: 作成
      ///
      /// Locales: ja, zh-Hans, en, ko
      static func listsCreateActionsPrimary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lists.create.actions.primary", tableName: "OtherMenu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OtherMenu", preferredLanguages: preferredLanguages) else {
          return "lists.create.actions.primary"
        }

        return NSLocalizedString("lists.create.actions.primary", tableName: "OtherMenu", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.preferences` struct is generated, and contains static references to 48 localization keys.
    struct preferences {
      /// ja translation: %dpx以下にリサイズ
      ///
      /// Locales: ja
      static let postAutoResizePixel = Rswift.StringResource(key: "post.autoResize.pixel", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Apple MusicならURLを付ける (できれば)
      ///
      /// Locales: ja
      static let nowPlayingAddURLIfAppleMusicAndAvailable = Rswift.StringResource(key: "nowPlaying.addURLIfAppleMusicAndAvailable", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: NowPlaying
      ///
      /// Locales: ja
      static let nowPlayingTitle = Rswift.StringResource(key: "nowPlaying.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ONにしたタイプはすべて個別のグループになります。
      ///
      /// Locales: ja
      static let pushSharedGroupRulesByTypeDescription = Rswift.StringResource(key: "push.shared.groupRules.byType.description", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: OSの動画プレーヤーを使う
      ///
      /// Locales: ja
      static let timelineUseSystemVideoPlayer = Rswift.StringResource(key: "timeline.useSystemVideoPlayer", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Universal Links を優先
      ///
      /// Locales: ja
      static let timelineUseUniversalLinks = Rswift.StringResource(key: "timeline.useUniversalLinks", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: WebMをVLCで開く
      ///
      /// Locales: ja
      static let timelineOpenWebMInVLC = Rswift.StringResource(key: "timeline.openWebMInVLC", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: WiFi接続時のみ
      ///
      /// Locales: ja
      static let generalStreamingAutoConnectWifi = Rswift.StringResource(key: "general.streamingAutoConnect.wifi", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: inReplyToの有無を絵文字で表示
      ///
      /// Locales: ja
      static let timelineAppearanceInReplyToAsEmoji = Rswift.StringResource(key: "timelineAppearance.inReplyToAsEmoji", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: しない
      ///
      /// Locales: ja
      static let postAutoResizeNo = Rswift.StringResource(key: "post.autoResize.no", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: でかい投稿ボタンの場所
      ///
      /// Locales: ja
      static let timelineAppearanceBigNewPostButtonLocationTitle = Rswift.StringResource(key: "timelineAppearance.bigNewPostButton.location.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: でかい投稿ボタンを表示
      ///
      /// Locales: ja
      static let timelineAppearanceBigNewPostButtonShow = Rswift.StringResource(key: "timelineAppearance.bigNewPostButton.show", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ぬるぬるモード(再起動後反映)
      ///
      /// Locales: ja
      static let timelineAppearanceNurunuru = Rswift.StringResource(key: "timelineAppearance.nurunuru", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アイコンの大きさ
      ///
      /// Locales: ja
      static let timelineAppearanceIconSize = Rswift.StringResource(key: "timelineAppearance.iconSize", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウントを追加
      ///
      /// Locales: ja
      static let pushAddAccountTitle = Rswift.StringResource(key: "push.addAccount.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウント一覧
      ///
      /// Locales: ja
      static let pushAccountsTitle = Rswift.StringResource(key: "push.accounts.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウント毎にグループを分ける
      ///
      /// Locales: ja
      static let pushSharedGroupRulesByAccount = Rswift.StringResource(key: "push.shared.groupRules.byAccount", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウント追加
      ///
      /// Locales: ja
      static let pushAddAccountAlertTitle = Rswift.StringResource(key: "push.addAccount.alertTitle", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: インスタンスのホスト名を入力してください (https://などは含めず入力してください)
      ///
      /// Locales: ja
      static let pushAddAccountAlertText = Rswift.StringResource(key: "push.addAccount.alertText", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: グループ化のルール設定 (β)
      ///
      /// Locales: ja
      static let pushSharedGroupRulesTitle = Rswift.StringResource(key: "push.shared.groupRules.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: コピー
      ///
      /// Locales: ja
      static let pushSupportShowUserIDCopyAction = Rswift.StringResource(key: "push.support.showUserID.copyAction", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: サポート用
      ///
      /// Locales: ja
      static let pushSupportTitle = Rswift.StringResource(key: "push.support.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: サムネイルの高さ
      ///
      /// Locales: ja
      static let timelineAppearanceThumbnailHeight = Rswift.StringResource(key: "timelineAppearance.thumbnailHeight", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ストリーミング自動接続
      ///
      /// Locales: ja
      static let generalStreamingAutoConnectTitle = Rswift.StringResource(key: "general.streamingAutoConnect.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: タイムライン
      ///
      /// Locales: ja
      static let timelineTitle = Rswift.StringResource(key: "timeline.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: タイムラインの外観
      ///
      /// Locales: ja
      static let timelineAppearanceTitle = Rswift.StringResource(key: "timelineAppearance.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: デフォルト公開範囲を利用
      ///
      /// Locales: ja
      static let postUseDefaultVisibility = Rswift.StringResource(key: "post.useDefaultVisibility", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: フォーマット
      ///
      /// Locales: ja
      static let nowPlayingFormatTitle = Rswift.StringResource(key: "nowPlaying.format.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: プッシュ通知
      ///
      /// Locales: ja
      static let pushLink = Rswift.StringResource(key: "push.link", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: プッシュ通知の設定を削除
      ///
      /// Locales: ja
      static let pushSharedDeleteAccountTitle = Rswift.StringResource(key: "push.shared.deleteAccount.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: プッシュ通知ユーザーIDを表示
      ///
      /// Locales: ja
      static let pushSupportShowUserIDTitle = Rswift.StringResource(key: "push.support.showUserID.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: プッシュ通知設定
      ///
      /// Locales: ja
      static let pushTitle = Rswift.StringResource(key: "push.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ユーザーID
      ///
      /// Locales: ja
      static let pushSupportShowUserIDAlertTitle = Rswift.StringResource(key: "push.support.showUserID.alertTitle", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ユーザーIDがわかりませんでした
      ///
      /// Locales: ja
      static let pushSupportShowUserIDFailedToCheckUserID = Rswift.StringResource(key: "push.support.showUserID.failedToCheckUserID", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ユーザー名の文字の大きさ
      ///
      /// Locales: ja
      static let timelineAppearanceUserNameSize = Rswift.StringResource(key: "timelineAppearance.userNameSize", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 公開範囲を絵文字で表示
      ///
      /// Locales: ja
      static let timelineAppearanceVisibilityAsEmoji = Rswift.StringResource(key: "timelineAppearance.visibilityAsEmoji", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 共通設定
      ///
      /// Locales: ja
      static let pushSharedTitle = Rswift.StringResource(key: "push.shared.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 常にしない
      ///
      /// Locales: ja
      static let generalStreamingAutoConnectNo = Rswift.StringResource(key: "general.streamingAutoConnect.no", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 常にする
      ///
      /// Locales: ja
      static let generalStreamingAutoConnectAlways = Rswift.StringResource(key: "general.streamingAutoConnect.always", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 投稿
      ///
      /// Locales: ja
      static let postTitle = Rswift.StringResource(key: "post.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 投稿時にメディアURL追加
      ///
      /// Locales: ja
      static let postAddMediaURL = Rswift.StringResource(key: "post.addMediaURL", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 新規連携時のvia
      ///
      /// Locales: ja
      static let generalNewAccountViaTitle = Rswift.StringResource(key: "general.newAccountVia.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 本文の文字の大きさ
      ///
      /// Locales: ja
      static let timelineAppearanceContentSize = Rswift.StringResource(key: "timelineAppearance.contentSize", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 本文を太字で表示
      ///
      /// Locales: ja
      static let timelineAppearanceContentBold = Rswift.StringResource(key: "timelineAppearance.contentBold", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 画像の自動リサイズ
      ///
      /// Locales: ja
      static let postAutoResizeTitle = Rswift.StringResource(key: "post.autoResize.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 通知タイプ毎にグループを分ける
      ///
      /// Locales: ja
      static let pushSharedGroupRulesByTypeTitle = Rswift.StringResource(key: "push.shared.groupRules.byType.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 通知受信時のクライアント側の処理に失敗した場合に、本来の通知内容の代わりにエラーを通知する
      ///
      /// Locales: ja
      static let pushSharedDisplayErrorIfOccured = Rswift.StringResource(key: "push.shared.displayErrorIfOccured", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 通知音カスタム (α)
      ///
      /// Locales: ja
      static let pushSharedCustomSoundsTitle = Rswift.StringResource(key: "push.shared.customSounds.title", tableName: "Preferences", bundle: R.hostingBundle, locales: ["ja"], comment: nil)

      /// ja translation: %dpx以下にリサイズ
      ///
      /// Locales: ja
      static func postAutoResizePixel(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("post.autoResize.pixel", tableName: "Preferences", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "post.autoResize.pixel"
        }

        let format = NSLocalizedString("post.autoResize.pixel", tableName: "Preferences", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: Apple MusicならURLを付ける (できれば)
      ///
      /// Locales: ja
      static func nowPlayingAddURLIfAppleMusicAndAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nowPlaying.addURLIfAppleMusicAndAvailable", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "nowPlaying.addURLIfAppleMusicAndAvailable"
        }

        return NSLocalizedString("nowPlaying.addURLIfAppleMusicAndAvailable", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: NowPlaying
      ///
      /// Locales: ja
      static func nowPlayingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nowPlaying.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "nowPlaying.title"
        }

        return NSLocalizedString("nowPlaying.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: ONにしたタイプはすべて個別のグループになります。
      ///
      /// Locales: ja
      static func pushSharedGroupRulesByTypeDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.groupRules.byType.description", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.groupRules.byType.description"
        }

        return NSLocalizedString("push.shared.groupRules.byType.description", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: OSの動画プレーヤーを使う
      ///
      /// Locales: ja
      static func timelineUseSystemVideoPlayer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeline.useSystemVideoPlayer", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timeline.useSystemVideoPlayer"
        }

        return NSLocalizedString("timeline.useSystemVideoPlayer", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: Universal Links を優先
      ///
      /// Locales: ja
      static func timelineUseUniversalLinks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeline.useUniversalLinks", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timeline.useUniversalLinks"
        }

        return NSLocalizedString("timeline.useUniversalLinks", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: WebMをVLCで開く
      ///
      /// Locales: ja
      static func timelineOpenWebMInVLC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeline.openWebMInVLC", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timeline.openWebMInVLC"
        }

        return NSLocalizedString("timeline.openWebMInVLC", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: WiFi接続時のみ
      ///
      /// Locales: ja
      static func generalStreamingAutoConnectWifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.streamingAutoConnect.wifi", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "general.streamingAutoConnect.wifi"
        }

        return NSLocalizedString("general.streamingAutoConnect.wifi", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: inReplyToの有無を絵文字で表示
      ///
      /// Locales: ja
      static func timelineAppearanceInReplyToAsEmoji(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.inReplyToAsEmoji", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.inReplyToAsEmoji"
        }

        return NSLocalizedString("timelineAppearance.inReplyToAsEmoji", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: しない
      ///
      /// Locales: ja
      static func postAutoResizeNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post.autoResize.no", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "post.autoResize.no"
        }

        return NSLocalizedString("post.autoResize.no", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: でかい投稿ボタンの場所
      ///
      /// Locales: ja
      static func timelineAppearanceBigNewPostButtonLocationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.bigNewPostButton.location.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.bigNewPostButton.location.title"
        }

        return NSLocalizedString("timelineAppearance.bigNewPostButton.location.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: でかい投稿ボタンを表示
      ///
      /// Locales: ja
      static func timelineAppearanceBigNewPostButtonShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.bigNewPostButton.show", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.bigNewPostButton.show"
        }

        return NSLocalizedString("timelineAppearance.bigNewPostButton.show", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: ぬるぬるモード(再起動後反映)
      ///
      /// Locales: ja
      static func timelineAppearanceNurunuru(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.nurunuru", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.nurunuru"
        }

        return NSLocalizedString("timelineAppearance.nurunuru", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: アイコンの大きさ
      ///
      /// Locales: ja
      static func timelineAppearanceIconSize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.iconSize", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.iconSize"
        }

        return NSLocalizedString("timelineAppearance.iconSize", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: アカウントを追加
      ///
      /// Locales: ja
      static func pushAddAccountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.addAccount.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.addAccount.title"
        }

        return NSLocalizedString("push.addAccount.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: アカウント一覧
      ///
      /// Locales: ja
      static func pushAccountsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.accounts.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.accounts.title"
        }

        return NSLocalizedString("push.accounts.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: アカウント毎にグループを分ける
      ///
      /// Locales: ja
      static func pushSharedGroupRulesByAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.groupRules.byAccount", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.groupRules.byAccount"
        }

        return NSLocalizedString("push.shared.groupRules.byAccount", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: アカウント追加
      ///
      /// Locales: ja
      static func pushAddAccountAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.addAccount.alertTitle", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.addAccount.alertTitle"
        }

        return NSLocalizedString("push.addAccount.alertTitle", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: インスタンスのホスト名を入力してください (https://などは含めず入力してください)
      ///
      /// Locales: ja
      static func pushAddAccountAlertText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.addAccount.alertText", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.addAccount.alertText"
        }

        return NSLocalizedString("push.addAccount.alertText", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: グループ化のルール設定 (β)
      ///
      /// Locales: ja
      static func pushSharedGroupRulesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.groupRules.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.groupRules.title"
        }

        return NSLocalizedString("push.shared.groupRules.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: コピー
      ///
      /// Locales: ja
      static func pushSupportShowUserIDCopyAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.support.showUserID.copyAction", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.support.showUserID.copyAction"
        }

        return NSLocalizedString("push.support.showUserID.copyAction", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: サポート用
      ///
      /// Locales: ja
      static func pushSupportTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.support.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.support.title"
        }

        return NSLocalizedString("push.support.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: サムネイルの高さ
      ///
      /// Locales: ja
      static func timelineAppearanceThumbnailHeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.thumbnailHeight", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.thumbnailHeight"
        }

        return NSLocalizedString("timelineAppearance.thumbnailHeight", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: ストリーミング自動接続
      ///
      /// Locales: ja
      static func generalStreamingAutoConnectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.streamingAutoConnect.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "general.streamingAutoConnect.title"
        }

        return NSLocalizedString("general.streamingAutoConnect.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: タイムライン
      ///
      /// Locales: ja
      static func timelineTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeline.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timeline.title"
        }

        return NSLocalizedString("timeline.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: タイムラインの外観
      ///
      /// Locales: ja
      static func timelineAppearanceTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.title"
        }

        return NSLocalizedString("timelineAppearance.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: デフォルト公開範囲を利用
      ///
      /// Locales: ja
      static func postUseDefaultVisibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post.useDefaultVisibility", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "post.useDefaultVisibility"
        }

        return NSLocalizedString("post.useDefaultVisibility", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: フォーマット
      ///
      /// Locales: ja
      static func nowPlayingFormatTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nowPlaying.format.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "nowPlaying.format.title"
        }

        return NSLocalizedString("nowPlaying.format.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: プッシュ通知
      ///
      /// Locales: ja
      static func pushLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.link", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.link"
        }

        return NSLocalizedString("push.link", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: プッシュ通知の設定を削除
      ///
      /// Locales: ja
      static func pushSharedDeleteAccountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.deleteAccount.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.deleteAccount.title"
        }

        return NSLocalizedString("push.shared.deleteAccount.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: プッシュ通知ユーザーIDを表示
      ///
      /// Locales: ja
      static func pushSupportShowUserIDTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.support.showUserID.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.support.showUserID.title"
        }

        return NSLocalizedString("push.support.showUserID.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: プッシュ通知設定
      ///
      /// Locales: ja
      static func pushTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.title"
        }

        return NSLocalizedString("push.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: ユーザーID
      ///
      /// Locales: ja
      static func pushSupportShowUserIDAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.support.showUserID.alertTitle", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.support.showUserID.alertTitle"
        }

        return NSLocalizedString("push.support.showUserID.alertTitle", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: ユーザーIDがわかりませんでした
      ///
      /// Locales: ja
      static func pushSupportShowUserIDFailedToCheckUserID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.support.showUserID.failedToCheckUserID", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.support.showUserID.failedToCheckUserID"
        }

        return NSLocalizedString("push.support.showUserID.failedToCheckUserID", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: ユーザー名の文字の大きさ
      ///
      /// Locales: ja
      static func timelineAppearanceUserNameSize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.userNameSize", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.userNameSize"
        }

        return NSLocalizedString("timelineAppearance.userNameSize", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 公開範囲を絵文字で表示
      ///
      /// Locales: ja
      static func timelineAppearanceVisibilityAsEmoji(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.visibilityAsEmoji", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.visibilityAsEmoji"
        }

        return NSLocalizedString("timelineAppearance.visibilityAsEmoji", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 共通設定
      ///
      /// Locales: ja
      static func pushSharedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.title"
        }

        return NSLocalizedString("push.shared.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 常にしない
      ///
      /// Locales: ja
      static func generalStreamingAutoConnectNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.streamingAutoConnect.no", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "general.streamingAutoConnect.no"
        }

        return NSLocalizedString("general.streamingAutoConnect.no", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 常にする
      ///
      /// Locales: ja
      static func generalStreamingAutoConnectAlways(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.streamingAutoConnect.always", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "general.streamingAutoConnect.always"
        }

        return NSLocalizedString("general.streamingAutoConnect.always", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿
      ///
      /// Locales: ja
      static func postTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "post.title"
        }

        return NSLocalizedString("post.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿時にメディアURL追加
      ///
      /// Locales: ja
      static func postAddMediaURL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post.addMediaURL", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "post.addMediaURL"
        }

        return NSLocalizedString("post.addMediaURL", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 新規連携時のvia
      ///
      /// Locales: ja
      static func generalNewAccountViaTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.newAccountVia.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "general.newAccountVia.title"
        }

        return NSLocalizedString("general.newAccountVia.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 本文の文字の大きさ
      ///
      /// Locales: ja
      static func timelineAppearanceContentSize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.contentSize", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.contentSize"
        }

        return NSLocalizedString("timelineAppearance.contentSize", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 本文を太字で表示
      ///
      /// Locales: ja
      static func timelineAppearanceContentBold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timelineAppearance.contentBold", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "timelineAppearance.contentBold"
        }

        return NSLocalizedString("timelineAppearance.contentBold", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 画像の自動リサイズ
      ///
      /// Locales: ja
      static func postAutoResizeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("post.autoResize.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "post.autoResize.title"
        }

        return NSLocalizedString("post.autoResize.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 通知タイプ毎にグループを分ける
      ///
      /// Locales: ja
      static func pushSharedGroupRulesByTypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.groupRules.byType.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.groupRules.byType.title"
        }

        return NSLocalizedString("push.shared.groupRules.byType.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 通知受信時のクライアント側の処理に失敗した場合に、本来の通知内容の代わりにエラーを通知する
      ///
      /// Locales: ja
      static func pushSharedDisplayErrorIfOccured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.displayErrorIfOccured", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.displayErrorIfOccured"
        }

        return NSLocalizedString("push.shared.displayErrorIfOccured", tableName: "Preferences", bundle: bundle, comment: "")
      }

      /// ja translation: 通知音カスタム (α)
      ///
      /// Locales: ja
      static func pushSharedCustomSoundsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push.shared.customSounds.title", tableName: "Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Preferences", preferredLanguages: preferredLanguages) else {
          return "push.shared.customSounds.title"
        }

        return NSLocalizedString("push.shared.customSounds.title", tableName: "Preferences", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.search` struct is generated, and contains static references to 5 localization keys.
    struct search {
      /// ja translation: アカウント
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let sectionsAccountsTitle = Rswift.StringResource(key: "sections.accounts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: トレンドタグ (更新: %@)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let sectionsTrendTagsTitle = Rswift.StringResource(key: "sections.trendTags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ハッシュタグ
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let sectionsHashtagsTitle = Rswift.StringResource(key: "sections.hashtags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let sectionsPostsTitle = Rswift.StringResource(key: "sections.posts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 検索
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let title = Rswift.StringResource(key: "title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)

      /// ja translation: アカウント
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func sectionsAccountsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sections.accounts.title", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.accounts.title"
        }

        return NSLocalizedString("sections.accounts.title", tableName: "Search", bundle: bundle, comment: "")
      }

      /// ja translation: トレンドタグ (更新: %@)
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func sectionsTrendTagsTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("sections.trendTags.title", tableName: "Search", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.trendTags.title"
        }

        let format = NSLocalizedString("sections.trendTags.title", tableName: "Search", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// ja translation: ハッシュタグ
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func sectionsHashtagsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sections.hashtags.title", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.hashtags.title"
        }

        return NSLocalizedString("sections.hashtags.title", tableName: "Search", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func sectionsPostsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sections.posts.title", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "sections.posts.title"
        }

        return NSLocalizedString("sections.posts.title", tableName: "Search", bundle: bundle, comment: "")
      }

      /// ja translation: 検索
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Search", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Search", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.userProfile` struct is generated, and contains static references to 18 localization keys.
    struct userProfile {
      /// ja translation: このユーザーは外部インスタンスに所属しているため、一部の数値が正確でない場合があります。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let federatedUserWarning = Rswift.StringResource(key: "federatedUserWarning", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: アクション
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsTitle = Rswift.StringResource(key: "actions.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: キャンセル
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsCancel = Rswift.StringResource(key: "actions.cancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: フォロワー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let cellsFollowersTitle = Rswift.StringResource(key: "cells.followers.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: フォロー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsFollow = Rswift.StringResource(key: "actions.follow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: フォロー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let cellsFollowingTitle = Rswift.StringResource(key: "cells.following.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: フォローリクエストを撤回
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsFollowRequestCancel = Rswift.StringResource(key: "actions.followRequestCancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: フォローリクエスト一覧
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsFollowRequestsList = Rswift.StringResource(key: "actions.followRequestsList", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: フォロー解除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsUnfollow = Rswift.StringResource(key: "actions.unfollow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ブロック
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsBlock = Rswift.StringResource(key: "actions.block", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ブロック解除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsUnblock = Rswift.StringResource(key: "actions.unblock", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: プロフィール
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let title = Rswift.StringResource(key: "title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ミュート
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsMute = Rswift.StringResource(key: "actions.mute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: ミュート解除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsUnmute = Rswift.StringResource(key: "actions.unmute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 共有
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsShare = Rswift.StringResource(key: "actions.share", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 名刺
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let actionsProfileCard = Rswift.StringResource(key: "actions.profileCard", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let cellsTootsTitle = Rswift.StringResource(key: "cells.toots.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)
      /// ja translation: 登録日
      ///
      /// Locales: ja, en, zh-Hans, ko
      static let cellsCreatedAtTitle = Rswift.StringResource(key: "cells.createdAt.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en", "zh-Hans", "ko"], comment: nil)

      /// ja translation: このユーザーは外部インスタンスに所属しているため、一部の数値が正確でない場合があります。
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func federatedUserWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("federatedUserWarning", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "federatedUserWarning"
        }

        return NSLocalizedString("federatedUserWarning", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: アクション
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.title", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.title"
        }

        return NSLocalizedString("actions.title", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: キャンセル
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.cancel", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.cancel"
        }

        return NSLocalizedString("actions.cancel", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: フォロワー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func cellsFollowersTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.followers.title", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.followers.title"
        }

        return NSLocalizedString("cells.followers.title", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: フォロー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsFollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.follow", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.follow"
        }

        return NSLocalizedString("actions.follow", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: フォロー
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func cellsFollowingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.following.title", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.following.title"
        }

        return NSLocalizedString("cells.following.title", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: フォローリクエストを撤回
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsFollowRequestCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.followRequestCancel", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.followRequestCancel"
        }

        return NSLocalizedString("actions.followRequestCancel", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: フォローリクエスト一覧
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsFollowRequestsList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.followRequestsList", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.followRequestsList"
        }

        return NSLocalizedString("actions.followRequestsList", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: フォロー解除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsUnfollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.unfollow", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.unfollow"
        }

        return NSLocalizedString("actions.unfollow", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: ブロック
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsBlock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.block", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.block"
        }

        return NSLocalizedString("actions.block", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: ブロック解除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsUnblock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.unblock", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.unblock"
        }

        return NSLocalizedString("actions.unblock", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: プロフィール
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: ミュート
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsMute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.mute", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.mute"
        }

        return NSLocalizedString("actions.mute", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: ミュート解除
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsUnmute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.unmute", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.unmute"
        }

        return NSLocalizedString("actions.unmute", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: 共有
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.share", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.share"
        }

        return NSLocalizedString("actions.share", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: 名刺
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func actionsProfileCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("actions.profileCard", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "actions.profileCard"
        }

        return NSLocalizedString("actions.profileCard", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: 投稿
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func cellsTootsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.toots.title", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.toots.title"
        }

        return NSLocalizedString("cells.toots.title", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      /// ja translation: 登録日
      ///
      /// Locales: ja, en, zh-Hans, ko
      static func cellsCreatedAtTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cells.createdAt.title", tableName: "UserProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserProfile", preferredLanguages: preferredLanguages) else {
          return "cells.createdAt.title"
        }

        return NSLocalizedString("cells.createdAt.title", tableName: "UserProfile", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AddAccountSuccessViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddAccountSuccessViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NewPostMediaListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NewPostMediaListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationTableViewCell

      let bundle = R.hostingBundle
      let identifier = "notificationTableViewCell"
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      fileprivate init() {}
    }

    struct _UserProfileBioTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileBioTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileBioTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
      }

      fileprivate init() {}
    }

    struct _UserProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try newPost.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileCard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct newPost: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewPostViewController

      let bundle = R.hostingBundle
      let name = "NewPost"

      static func validate() throws {
        if UIKit.UIImage(named: "ArrowUp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowUp' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera.fill' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "music.note", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'music.note' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visibility-public", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visibility-public' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileCard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileCardViewController

      let bundle = R.hostingBundle
      let name = "ProfileCard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
