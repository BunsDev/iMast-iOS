//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `emoji.json`.
    static let emojiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emoji", pathExtension: "json")
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "emoji", withExtension: "json")`
    static func emojiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojiJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `ArrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowDown")
    /// Image `ArrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowUp")
    /// Image `Boost`.
    static let boost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Boost")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `Follow`.
    static let follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow")
    /// Image `HomeOutline`.
    static let homeOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeOutline")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `MoreOutline`.
    static let moreOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoreOutline")
    /// Image `More`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "More")
    /// Image `NotificationOutline`.
    static let notificationOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "NotificationOutline")
    /// Image `Notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification")
    /// Image `NowPlaying`.
    static let nowPlaying = Rswift.ImageResource(bundle: R.hostingBundle, name: "NowPlaying")
    /// Image `PeopleOutline`.
    static let peopleOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "PeopleOutline")
    /// Image `People`.
    static let people = Rswift.ImageResource(bundle: R.hostingBundle, name: "People")
    /// Image `PhotosInline`.
    static let photosInline = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotosInline")
    /// Image `Reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reply")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `StreamingStatus`.
    static let streamingStatus = Rswift.ImageResource(bundle: R.hostingBundle, name: "StreamingStatus")
    /// Image `visibility-direct`.
    static let visibilityDirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-direct")
    /// Image `visibility-private`.
    static let visibilityPrivate = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-private")
    /// Image `visibility-public`.
    static let visibilityPublic = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-public")
    /// Image `visibility-unlisted`.
    static let visibilityUnlisted = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-unlisted")
    
    /// `UIImage(named: "ArrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Boost", bundle: ..., traitCollection: ...)`
    static func boost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boost, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Follow", bundle: ..., traitCollection: ...)`
    static func follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeOutline", bundle: ..., traitCollection: ...)`
    static func homeOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "More", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MoreOutline", bundle: ..., traitCollection: ...)`
    static func moreOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NotificationOutline", bundle: ..., traitCollection: ...)`
    static func notificationOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NowPlaying", bundle: ..., traitCollection: ...)`
    static func nowPlaying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nowPlaying, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "People", bundle: ..., traitCollection: ...)`
    static func people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PeopleOutline", bundle: ..., traitCollection: ...)`
    static func peopleOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.peopleOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PhotosInline", bundle: ..., traitCollection: ...)`
    static func photosInline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photosInline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "StreamingStatus", bundle: ..., traitCollection: ...)`
    static func streamingStatus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.streamingStatus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-direct", bundle: ..., traitCollection: ...)`
    static func visibilityDirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityDirect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-private", bundle: ..., traitCollection: ...)`
    static func visibilityPrivate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPrivate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-public", bundle: ..., traitCollection: ...)`
    static func visibilityPublic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPublic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-unlisted", bundle: ..., traitCollection: ...)`
    static func visibilityUnlisted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityUnlisted, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `MastodonPostCell`.
    static let mastodonPostCell = _R.nib._MastodonPostCell()
    /// Nib `NewPostMediaListViewController`.
    static let newPostMediaListViewController = _R.nib._NewPostMediaListViewController()
    /// Nib `TimeLineReadMoreCell`.
    static let timeLineReadMoreCell = _R.nib._TimeLineReadMoreCell()
    /// Nib `UserProfileBioTableViewCell`.
    static let userProfileBioTableViewCell = _R.nib._UserProfileBioTableViewCell()
    /// Nib `UserProfileInfoTableViewCell`.
    static let userProfileInfoTableViewCell = _R.nib._UserProfileInfoTableViewCell()
    
    /// `UINib(name: "MastodonPostCell", in: bundle)`
    static func mastodonPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mastodonPostCell)
    }
    
    /// `UINib(name: "NewPostMediaListViewController", in: bundle)`
    static func newPostMediaListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newPostMediaListViewController)
    }
    
    /// `UINib(name: "TimeLineReadMoreCell", in: bundle)`
    static func timeLineReadMoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeLineReadMoreCell)
    }
    
    /// `UINib(name: "UserProfileBioTableViewCell", in: bundle)`
    static func userProfileBioTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileBioTableViewCell)
    }
    
    /// `UINib(name: "UserProfileInfoTableViewCell", in: bundle)`
    static func userProfileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileInfoTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `OtherMenuAccountChangeCell`.
    static let otherMenuAccountChangeCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "OtherMenuAccountChangeCell")
    /// Reuse identifier `list`.
    static let list: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "list")
    /// Reuse identifier `myProfile`.
    static let myProfile: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "myProfile")
    /// Reuse identifier `settings`.
    static let settings: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "settings")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `AddAccountIndexViewController`, and contains static references to 1 segues.
    struct addAccountIndexViewController {
      /// Segue identifier `goProgress`.
      static let goProgress: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountIndexViewController, AddAccountProgressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goProgress")
      
      /// Optionally returns a typed version of segue `goProgress`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goProgress(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountIndexViewController, AddAccountProgressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountIndexViewController.goProgress, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddAccountLoginViewController`, and contains static references to 1 segues.
    struct addAccountLoginViewController {
      /// Segue identifier `backToProgress`.
      static let backToProgress: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountLoginViewController, AddAccountProgressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "backToProgress")
      
      /// Optionally returns a typed version of segue `backToProgress`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func backToProgress(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountLoginViewController, AddAccountProgressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountLoginViewController.backToProgress, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddAccountProgressViewController`, and contains static references to 3 segues.
    struct addAccountProgressViewController {
      /// Segue identifier `errorBack`.
      static let errorBack: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountIndexViewController> = Rswift.StoryboardSegueIdentifier(identifier: "errorBack")
      /// Segue identifier `goSelectLoginMethod`.
      static let goSelectLoginMethod: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSelectLoginMethodViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goSelectLoginMethod")
      /// Segue identifier `goSuccess`.
      static let goSuccess: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSuccessViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goSuccess")
      
      /// Optionally returns a typed version of segue `errorBack`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func errorBack(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountIndexViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountProgressViewController.errorBack, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goSelectLoginMethod`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goSelectLoginMethod(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSelectLoginMethodViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountProgressViewController.goSelectLoginMethod, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goSuccess`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goSuccess(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSuccessViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountProgressViewController.goSuccess, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddAccountSelectLoginMethodViewController`, and contains static references to 1 segues.
    struct addAccountSelectLoginMethodViewController {
      /// Segue identifier `goMailAddressAndPasswordLogin`.
      static let goMailAddressAndPasswordLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountSelectLoginMethodViewController, AddAccountLoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goMailAddressAndPasswordLogin")
      
      /// Optionally returns a typed version of segue `goMailAddressAndPasswordLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goMailAddressAndPasswordLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountSelectLoginMethodViewController, AddAccountLoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountSelectLoginMethodViewController.goMailAddressAndPasswordLogin, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MastodonPostDetail`.
    static let mastodonPostDetail = _R.storyboard.mastodonPostDetail()
    /// Storyboard `NewPost`.
    static let newPost = _R.storyboard.newPost()
    /// Storyboard `OtherMenu`.
    static let otherMenu = _R.storyboard.otherMenu()
    /// Storyboard `ProfileCard`.
    static let profileCard = _R.storyboard.profileCard()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "MastodonPostDetail", bundle: ...)`
    static func mastodonPostDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mastodonPostDetail)
    }
    
    /// `UIStoryboard(name: "NewPost", bundle: ...)`
    static func newPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newPost)
    }
    
    /// `UIStoryboard(name: "OtherMenu", bundle: ...)`
    static func otherMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.otherMenu)
    }
    
    /// `UIStoryboard(name: "ProfileCard", bundle: ...)`
    static func profileCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileCard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MastodonPostCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MastodonPostCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MastodonPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MastodonPostCell
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NewPostMediaListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NewPostMediaListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TimeLineReadMoreCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimeLineReadMoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileBioTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileBioTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileBioTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try otherMenu.validate()
      try login.validate()
      try newPost.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddAccountIndexViewController
      
      let bundle = R.hostingBundle
      let logintop = StoryboardViewControllerResource<AddAccountIndexViewController>(identifier: "logintop")
      let name = "Login"
      let progress = StoryboardViewControllerResource<AddAccountProgressViewController>(identifier: "progress")
      
      func logintop(_: Void = ()) -> AddAccountIndexViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logintop)
      }
      
      func progress(_: Void = ()) -> AddAccountProgressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: progress)
      }
      
      static func validate() throws {
        if _R.storyboard.login().progress() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'progress' could not be loaded from storyboard 'Login' as 'AddAccountProgressViewController'.") }
        if _R.storyboard.login().logintop() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logintop' could not be loaded from storyboard 'Login' as 'AddAccountIndexViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mastodonPostDetail: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MastodonPostDetailTableViewController
      
      let bundle = R.hostingBundle
      let name = "MastodonPostDetail"
      
      fileprivate init() {}
    }
    
    struct newPost: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewPostViewController
      
      let bundle = R.hostingBundle
      let name = "NewPost"
      
      static func validate() throws {
        if UIKit.UIImage(named: "visibility-public") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visibility-public' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Camera' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowUp") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowUp' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NowPlaying") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NowPlaying' is used in storyboard 'NewPost', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct otherMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "OtherMenu"
      
      static func validate() throws {
        if UIKit.UIImage(named: "More") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'More' is used in storyboard 'OtherMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MoreOutline") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MoreOutline' is used in storyboard 'OtherMenu', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileCard: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ProfileCardViewController
      
      let bundle = R.hostingBundle
      let name = "ProfileCard"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
